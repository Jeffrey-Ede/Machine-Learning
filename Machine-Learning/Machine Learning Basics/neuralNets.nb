(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    315745,       6909]
NotebookOptionsPosition[    305173,       6719]
NotebookOutlinePosition[    305521,       6734]
CellTagsIndexPosition[    305478,       6731]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], "}"}], ",", " ", 
    RowBox[{"{", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7263021411814795`*^9, 3.7263021623023057`*^9}, {
  3.726302253580097*^9, 
  3.726302293028515*^9}},ExpressionUUID->"b38db364-ec46-4dd1-9f5c-\
39e6fa064756"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input", "1", "Output"}, {Null, 
               RGBColor[0.29, 0.29, 0.83]}, {1, 2, 1}, {Null, Ramp}, {
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association["Output" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{170., {34.5, 40.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.7263023349810085`*^9, 3.7263023635497665`*^9}, 
   3.7263024537499523`*^9},ExpressionUUID->"ab336f6d-4a2d-4015-a57a-\
eec5b49cc9d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "1"}], ",", " ", "0", ",", " ", "1"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.726302476380344*^9, 
  3.7263024877191124`*^9}},ExpressionUUID->"d0cf8cd9-6df6-4390-a8ee-\
50c19e789dc9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7263024928019705`*^9},ExpressionUUID->"a8a1d821-ff4d-4621-85bd-\
bab2c1a612f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"LinearLayer", "[", "3", "]"}], ",", " ", 
      RowBox[{"LinearLayer", "[", "5", "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", " ", "2"}], "}"}], ",", " ", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "2"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7263025053611393`*^9, 
  3.726302539766039*^9}},ExpressionUUID->"299525ea-47a7-4d31-b27b-\
7aeefa2b0f36"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {3, 1}, {2,
               4}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "Input", "Output"}, {
               GrayLevel[0.4], Null}, {1, 1, 2, 2}, {LinearLayer, Null}, {
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association[
               "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{5, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{234., {34.5, 40.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7263025430931497`*^9},ExpressionUUID->"7c5f41b7-259e-4c88-96d1-\
846672e33a39"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7263025896413584`*^9, 
  3.7263026000002823`*^9}},ExpressionUUID->"ffc11985-c51b-46c4-9d6e-\
3302eda810d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"{", 
   RowBox[{"1.0", ",", " ", "2.0"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7263026626665516`*^9, 
  3.726302682425572*^9}},ExpressionUUID->"09ab808f-ebc7-401f-a6c9-\
84bd72bc7c04"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5786593556404114`", ",", "1.7418763637542725`", ",", 
   RowBox[{"-", "1.9846664667129517`"}], ",", "0.11178696900606155`", ",", 
   "1.3684333562850952`"}], "}"}]], "Output",
 CellChangeTimes->{{3.7263026747261033`*^9, 
  3.726302682969602*^9}},ExpressionUUID->"c67ea53d-8c08-4b7a-bc5d-\
e76ef044f598"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<linear1\>\"", "\[Rule]", 
       RowBox[{"LinearLayer", "[", "3", "]"}]}], ",", " ", 
      RowBox[{"\"\<linear2\>\"", "\[Rule]", " ", 
       RowBox[{"LinearLayer", "[", "4", "]"}]}]}], "|>"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<linear1\>\"", "\[Rule]", " ", "\"\<linear2\>\""}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7263027145856314`*^9, 
  3.726302785155362*^9}},ExpressionUUID->"9824cfe5-5133-4a4a-9400-\
e26cefd5e599"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {3, 1}, {2,
               4}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "linear1", "linear2", "Input", "Output"}, {
               GrayLevel[0.4], Null}, {1, 1, 2, 2}, {LinearLayer, Null}, {
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "linear1"], 
                 NeuralNetworks`NetPath["Nodes", "linear2"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
               Association[
               "linear1" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{3, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                "linear2" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{4, 3}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 3, "$InputDimensions" -> {3}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{234., {34.5, 40.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7263027875460005`*^9},ExpressionUUID->"903ad303-d1a7-4b84-92eb-\
329ef5736748"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"net", ",", " ", "\"\<linear2\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.726302869411108*^9, 
  3.7263028814045877`*^9}},ExpressionUUID->"d3e33113-e28e-4fdd-8854-\
a1afd6026f1d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["LinearLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                 GrayLevel[0.65]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"4\""}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                 GrayLevel[0.65]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"4\""}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Arrays", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    StyleBox["\"Weights\"", 
                    RGBColor[0.58, 0.25, 0.25]], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    StyleBox["\"Biases\"", 
                    RGBColor[0.58, 0.25, 0.25]], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"optional\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                   "RowDefault"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Ports", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("LinearLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.726302898636145*^9},ExpressionUUID->"d639b4ef-4508-4465-9afd-\
311ca4f1aee0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"net", ",", " ", "\"\<linear1\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7263029100538116`*^9, 
  3.726302923910979*^9}},ExpressionUUID->"1cf431c1-5042-4044-a5dc-\
e0b39b48995c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["LinearLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                 GrayLevel[0.65]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                 GrayLevel[0.65]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8]}, 
               Alignment -> {Center, Center}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Arrays", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    StyleBox["\"Weights\"", 
                    RGBColor[0.58, 0.25, 0.25]], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"\[DottedSquare]\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    StyleBox["\"Biases\"", 
                    RGBColor[0.58, 0.25, 0.25]], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"optional\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                   "RowDefault"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Ports", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("LinearLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7263029247597847`*^9},ExpressionUUID->"c9360b82-9bdf-4cb0-98a6-\
f9a44fac89ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Ramp", ",", " ", "Tanh", ",", " ", "Times", ",", "Plus"}], 
     "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", " ", "\[Rule]", " ", 
       RowBox[{"2", " ", "\[Rule]", " ", "3"}]}], ",", " ", 
      RowBox[{"1", " ", "\[Rule]", 
       RowBox[{"3", " ", "\[Rule]", " ", "4"}]}], ",", " ", 
      RowBox[{"2", " ", "\[Rule]", " ", "4"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.72630293864954*^9, 
  3.7263029901130056`*^9}},ExpressionUUID->"22f054ca-ff71-40aa-88b1-\
b333741d5345"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {1,
               3}, {3, 4}, {2, 4}, {5, 1}, {4, 6}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "3", "4", "Input", "Output"}, {
               RGBColor[0.29, 0.29, 0.83], 
               RGBColor[0.01, 0.54, 0.67], Null}, {1, 1, 2, 2, 3, 3}, {
              ElementwiseLayer, ThreadingLayer, Null}, {
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT]}, {
              Ramp, Tanh, Times, Plus, None, None}]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Nodes", "4"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association["Output" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "Threading", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "4" -> 
                Association[
                 "Type" -> "Threading", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{362., {67., 73.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.726302993843053*^9},ExpressionUUID->"79a321bc-9347-4068-affe-\
b25bbe1f030a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "2"}], ",", " ", 
    RowBox[{"-", "1"}], ",", " ", "0", ",", " ", "1", ",", " ", "2"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.726303031831952*^9, 
  3.7263030535220356`*^9}},ExpressionUUID->"1b4d6b8c-2d7e-423b-80a8-\
9184e2a04093"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.`", ",", "0.`", ",", "1.5231883525848389`", ",", 
   "2.892082691192627`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.72630305526289*^9},ExpressionUUID->"1d335125-2c9a-4220-bf6b-e2ae3e73c784"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7263031581760445`*^9, 
  3.726303268372876*^9}},ExpressionUUID->"a91c6429-9b49-4962-a572-\
dc47d370418f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "2", ",", " ", "Ramp", ",", " ", "4", ",", " ", "Ramp", ",", " ", "8"}], 
     "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", " ", "\[Rule]", " ", 
      RowBox[{"2", " ", "\[Rule]", " ", 
       RowBox[{"3", " ", "\[Rule]", " ", 
        RowBox[{"4", " ", "\[Rule]", " ", "5"}]}]}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7263032789076405`*^9, 
  3.7263033110521917`*^9}},ExpressionUUID->"1b8152ef-b0c0-4dec-8396-\
065b6fded70d"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {4, 5}, {6, 1}, {5, 7}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "3", "4", "5", "Input", "Output"}, {
               GrayLevel[0.4], 
               RGBColor[0.29, 0.29, 0.83], Null}, {1, 2, 1, 2, 1, 3, 3}, {
              LinearLayer, Ramp, Null}, {
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Nodes", "4"], 
                 NeuralNetworks`NetPath["Nodes", "5"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{2, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{4, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "4" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "5" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{8, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{426., {34.5, 40.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.7263031697031527`*^9, 3.726303206556535*^9}, {
   3.7263032424676332`*^9, 3.72630326391294*^9}, 
   3.7263033123969393`*^9},ExpressionUUID->"25451d8b-36a9-423c-9a46-\
16b318633fcb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetChain", "[", 
  RowBox[{"{", 
   RowBox[{
   "2", ",", " ", "Ramp", ",", " ", "4", ",", " ", "Ramp", ",", " ", "8"}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.726303413243391*^9, 
  3.7263034423061213`*^9}},ExpressionUUID->"05f4556c-3d65-4a6d-bfd7-\
bdeff0be7574"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{2, NeuralNetworks`SizeT}, 
                 NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
               NeuralNetworks`SizeT, "$InputDimensions" -> 
               NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]],
            "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {2}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]],
            "3" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{4, 2}, NeuralNetworks`RealT], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               2, "$InputDimensions" -> {2}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]],
            "4" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]],
            "5" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{8, 4}, NeuralNetworks`RealT], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {8}, "$OutputSize" -> 8, "$InputSize" -> 
               4, "$InputDimensions" -> {4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[
               NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{169., {63., 69.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.726303445367668*^9},ExpressionUUID->"654665a2-91aa-4ee6-83b5-\
4c693d104308"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Ramp", ",", " ", "LogisticSigmoid"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", " ", 
      RowBox[{"1", "\[Rule]", 
       RowBox[{"NetPort", "[", "\"\<Output1\>\"", "]"}]}], ",", " ", 
      RowBox[{"2", "\[Rule]", " ", 
       RowBox[{"NetPort", "[", "\"\<Output2\>\"", "]"}]}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7263035673483686`*^9, 3.7263035759784503`*^9}, {
  3.726303628001515*^9, 
  3.726303682269249*^9}},ExpressionUUID->"69da28dc-5590-4090-9ffb-\
c542b9094e46"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {1, 3}, {2,
               4}, {5, 1}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "Output1", "Output2", "Input"}, {
               RGBColor[0.29, 0.29, 0.83], Null}, {1, 1, 2, 2, 2}, {
              ElementwiseLayer, Null}, {
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT]}, {
              Ramp, LogisticSigmoid, None, None, None}]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Outputs", "Output1"], 
                 NeuralNetworks`NetPath["Outputs", "Output2"], 
                 NeuralNetworks`NetPath["Inputs", "Input"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association["Output1" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT], "Output2" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{237., {64., 70.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7263036959151278`*^9},ExpressionUUID->"7a991b40-d6a6-4644-b9bf-\
60b832017870"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "1"}], ",", " ", "0", ",", " ", "1"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.726303711653143*^9, 
  3.726303723143705*^9}},ExpressionUUID->"033ebf52-29ac-41da-a1ce-\
411178a2c5cb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Output1\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.`", ",", "0.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"Output2\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.5`", ",", "0.5`", ",", "0.7310585975646973`"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.726303724151515*^9},ExpressionUUID->"7e3b66ce-b3fc-406c-9460-\
3c55fe15ff06"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", " ", "0", ",", " ", "1"}], "}"}], ",", " ", 
   "\"\<Output1\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.726303786464041*^9, 
  3.7263037996523504`*^9}},ExpressionUUID->"f238a82c-1925-4cc4-9832-\
75da03b1110d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7263038031892242`*^9},ExpressionUUID->"d3e24ae1-4d5f-423e-8a28-\
042152146ff9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"subnet", " ", "=", " ", 
  RowBox[{"Take", "[", 
   RowBox[{"net", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", " ", 
      RowBox[{"NetPort", "[", "\"\<Output2\>\"", "]"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.726303805638508*^9, 
  3.7263038587607665`*^9}},ExpressionUUID->"2e53354d-800a-4c54-b24f-\
2b00156b5ffa"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {4,
               1}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "Output2", "Input"}, {
               RGBColor[0.29, 0.29, 0.83], Null}, {1, 1, 2, 2}, {
              ElementwiseLayer, Null}, {
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT]}, {Ramp, LogisticSigmoid, None, None}]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Outputs", "Output2"], 
                 NeuralNetworks`NetPath["Inputs", "Input"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association["Output2" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{237., {35., 41.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.726303860583335*^9},ExpressionUUID->"28faf09d-35a9-4f46-8e66-\
86e2a37844d9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"subnet", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "1"}], ",", " ", "0", ",", " ", "1"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.726303919404344*^9, 
  3.726303971369411*^9}},ExpressionUUID->"3d81df80-76aa-4c7c-b571-\
6cf0d251b2fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Ramp", ",", " ", "LogisticSigmoid", ",", " ", 
      RowBox[{"CatenateLayer", "[", "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "2"}], ",", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "2"}], "}"}], " ", "\[Rule]", " ", "3"}]}], 
     "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7263040149375973`*^9, 
  3.726304055137822*^9}},ExpressionUUID->"cd07b38e-7644-403b-8ea8-\
ddc5d2160989"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {1, 3}, {2,
               3}, {4, 1}, {3, 5}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "3", "Input", "Output"}, {
               RGBColor[0.29, 0.29, 0.83], 
               RGBColor[1., 0.7, 0.31], Null}, {1, 1, 2, 3, 3}, {
              ElementwiseLayer, CatenateLayer, Null}, {
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT]}, {
              Ramp, LogisticSigmoid, None, None, None}]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association["Output" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "Catenate", "Arrays" -> Association[], 
                  "Parameters" -> Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}, "$InputCount" -> 2, 
                    "$OutputShape" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{298., {66.5, 72.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.726304057413173*^9},ExpressionUUID->"8950a49a-bc45-4571-bb60-\
3443dc7dbaf4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Ramp", ",", " ", "LogisticSigmoid", ",", " ", 
      RowBox[{"TotalLayer", "[", "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input1\>\"", "]"}], "\[Rule]", "1"}], ",",
       " ", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input2\>\"", "]"}], "\[Rule]", "2"}], ",",
       " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "2"}], "}"}], " ", "\[Rule]", " ", "3"}]}], 
     "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.726304408754691*^9, 
  3.726304492467681*^9}},ExpressionUUID->"3227385b-b096-444b-b42c-\
adb409b02854"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {3, 4}, {2,
               5}, {4, 5}, {5, 6}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Input1", "1", "Input2", "2", "3", "Output"}, {Null, 
               RGBColor[0.29, 0.29, 0.83], 
               RGBColor[0.6, 0.4, 0.2]}, {1, 2, 1, 2, 3, 1}, {
              Null, ElementwiseLayer, TotalLayer}, {
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT]}, {
              None, Ramp, None, LogisticSigmoid, None, None}]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Input1"], 
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Inputs", "Input2"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input1" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association["Output" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                  Association["$InputCount" -> 2], "Inputs" -> 
                  Association["Input" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{237., {67., 73.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7263045144450555`*^9},ExpressionUUID->"c30874f9-2c28-4d48-8482-\
97d1acc68cbb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input1\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", " ", "0", ",", " ", "1"}], "}"}]}], ",", " ", 
    RowBox[{"\"\<Input2\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}]}]}], "|>"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7263046103853054`*^9, 
  3.726304677251579*^9}},ExpressionUUID->"d0edf368-733a-45e7-b145-\
2290308eaad7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.7310585975646973`", ",", "0.8807970285415649`", ",", 
   "1.9525741338729858`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7263046807684054`*^9},ExpressionUUID->"81b3b9eb-1bde-443d-9e2b-\
a2b21db62e86"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"LinearLayer", "[", "2", "]"}], ",", " ", 
      RowBox[{"SoftmaxLayer", "[", "]"}], ",", " ", 
      RowBox[{"MeanSquaredLossLayer", "[", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"2", "\[Rule]", "3"}]}], "}"}], ",", " ", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7263047271489096`*^9, 3.7263047286496105`*^9}, {
  3.7263048445321965`*^9, 
  3.726304892268547*^9}},ExpressionUUID->"a1c4bf8e-bc91-4115-b8ca-\
553ea798616d"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {4,
               1}, {5, 3}, {3, 6}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "3", "Input", "Target", "Loss"}, {
               GrayLevel[0.4], 
               RGBColor[0.5, 0.32, 0.99], 
               RGBColor[1., 0.4, 1.], Null}, {1, 2, 3, 4, 4, 4}, {
              LinearLayer, SoftmaxLayer, MeanSquaredLossLayer, Null}, {
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Inputs", "Target"], 
                 NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NetEncoder["Scalar", 
                  Association[], 
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                "Target" -> 
                NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
               Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{2, 1}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "MeanSquaredLoss", "Arrays" -> Association[], 
                  "Parameters" -> Association["$Dimensions" -> {2}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{292., {74., 80.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7263049556131706`*^9},ExpressionUUID->"ddf577aa-f107-40e2-b2c9-\
5fc2567ff07d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7263049591339974`*^9, 
  3.7263049738170223`*^9}},ExpressionUUID->"b92a9182-c6a3-40a0-b9ab-\
2ede00f350e9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", "1"}], ",", " ", 
    RowBox[{"\"\<Target\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"2", ",", " ", "3"}], "}"}]}]}], "|>"}], "]"}]], "Input",
 CellChangeTimes->{{3.726305005369631*^9, 3.726305027568616*^9}, {
  3.7263050637501345`*^9, 
  3.726305097515398*^9}},ExpressionUUID->"ce5b5b47-8ecc-4717-b2ab-\
2c27b400ea70"],

Cell[BoxData["4.311297416687012`"], "Output",
 CellChangeTimes->{
  3.726305028809581*^9, {3.7263050674790444`*^9, 
   3.7263050980764637`*^9}},ExpressionUUID->"05561eb7-694e-439e-918c-\
d65b4ed37650"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Ramp", ",", " ", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", "2"}], "}"}], ",", " ", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", " ", "\"\<b\>\""}], "}"}]}], "}"}], 
      "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7263051708324866`*^9, 3.7263052280200615`*^9}, {
  3.726305429520296*^9, 
  3.726305432038262*^9}},ExpressionUUID->"03ec4089-6035-4b01-b9a0-\
565425e9f6cd"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {3, 1}, {2,
               4}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "Input", "Output"}, {
               RGBColor[0.29, 0.29, 0.83], 
               RGBColor[0.5, 0.32, 0.99], Null}, {1, 2, 3, 3}, {
              Ramp, SoftmaxLayer, Null}, {
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association[
               "Input" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
               Association["Output" -> NetDecoder["Class", 
                  Association["Labels" -> {"a", "b"}, "Dimensions" -> 2], 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
               Association[
               "1" -> Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{234., {34.5, 40.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7263052301530037`*^9, 
  3.7263054334732704`*^9},ExpressionUUID->"77403a57-b34e-40e4-baa0-\
bfdd8ea73342"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"{", 
   RowBox[{"0.2", ",", " ", "0.8"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.726305252401626*^9, 
  3.7263052601277013`*^9}},ExpressionUUID->"7e3f0171-3d25-4080-9b93-\
6b96424c4025"],

Cell[BoxData["\<\"b\"\>"], "Output",
 CellChangeTimes->{3.726305261602331*^9, 
  3.7263054359256134`*^9},ExpressionUUID->"12b808ca-1eb0-4ecf-ac82-\
16df8c6ab8ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"{", 
   RowBox[{"0.5", ",", " ", "0.4"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7263052634875946`*^9, 3.7263052717971478`*^9}, {
  3.7263054053527794`*^9, 
  3.7263054215855713`*^9}},ExpressionUUID->"08ede598-0d9a-4744-8efc-\
c6e65b015cab"],

Cell[BoxData["\<\"a\"\>"], "Output",
 CellChangeTimes->{
  3.726305273779682*^9, {3.726305410693203*^9, 
   3.726305438383475*^9}},ExpressionUUID->"0af09a3f-6aaa-4545-90c5-\
7e1e98028d56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.8", ",", " ", "0.2"}], "}"}], ",", " ", 
   "\"\<Probabilities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.726305447369042*^9, 
  3.7263054773322883`*^9}},ExpressionUUID->"854896d8-debf-4449-9592-\
406389ce9732"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.6456562876701355`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.3543436825275421`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.7263054782734013`*^9},ExpressionUUID->"3da1ab7d-30c9-482c-8f82-\
cdf7ab734c07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.5", ",", " ", "0.4"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<Probability\>\"", ",", " ", "\"\<a\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7263059174463196`*^9, 
  3.7263059655353994`*^9}},ExpressionUUID->"e65c8111-4440-4b00-81cb-\
1001ea14249b"],

Cell[BoxData["0.5249791741371155`"], "Output",
 CellChangeTimes->{{3.7263059576724577`*^9, 
  3.7263059660468216`*^9}},ExpressionUUID->"da6bff42-cdfc-499f-b1ed-\
f8d64f878c26"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.8", ",", " ", "0.2"}], "}"}], ",", " ", "\"\<Entropy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.726305971606327*^9, 
  3.726305987256948*^9}},ExpressionUUID->"d0947248-7d5b-4829-b12d-\
e621ee3e2e23"],

Cell[BoxData["0.6500941767665759`"], "Output",
 CellChangeTimes->{
  3.726305987942862*^9},ExpressionUUID->"50600609-40c2-4a84-aa4e-\
fda858c28861"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", " ", "4", ",", " ", "8", ",", " ", "Tanh"}], "}"}], 
    ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"2", "\[Rule]", " ", 
       RowBox[{"3", "\[Rule]", "4"}]}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.726306203433428*^9, 
  3.726306234255391*^9}},ExpressionUUID->"62a2690f-c0df-4331-a37b-\
bce38c4729d6"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {5, 1}, {4, 6}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "3", "4", "Input", "Output"}, {
               GrayLevel[0.4], 
               RGBColor[0.29, 0.29, 0.83], Null}, {1, 1, 1, 2, 3, 3}, {
              LinearLayer, Tanh, Null}, {
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Nodes", "4"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{2, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{4, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{8, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], "4" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {8}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{362., {34.5, 40.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.726306237339012*^9},ExpressionUUID->"af815c58-565d-4c30-ad1f-\
c03c31ef80c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"net", ",", " ", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.726306306060171*^9, 
  3.7263063171145134`*^9}},ExpressionUUID->"6007b8ef-f5d7-432b-addd-\
076690f7ba1f"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {4,
               1}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "Output", "Input"}, {
               GrayLevel[0.4], 
               RGBColor[0.29, 0.29, 0.83], Null}, {1, 2, 3, 3}, {
              LinearLayer, Tanh, Null}, {
               NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Outputs", "Output"], 
                 NeuralNetworks`NetPath["Inputs", "Input"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association[
               "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{8, 4}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {8}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{234., {34.5, 40.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.726306318153409*^9},ExpressionUUID->"545999ff-68d3-40c3-a188-\
4d870db1cd6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"obj", " ", "=", " ", 
  RowBox[{"ResourceObject", "[", "\"\<CIFAR-100\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.7263063869901023`*^9, 
  3.726306403675993*^9}},ExpressionUUID->"20c7cdfb-2282-46ae-aaa5-\
407418486f3d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ResourceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.011111111111111112`], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789, 
                 7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
                 3.266}, {3.789, 3.266}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.129,
                  54.07}, {19.878999999999998`, 54.07}, {19.878999999999998`, 
                 15.57}, {14.129, 15.57}}}]}, 
               FaceForm[
                RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.129,
                  41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
                 38.910000000000004`, 15.57}, {33.160000000000004`, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{42.191,
                  31.781}, {47.941, 31.781}, {47.941, 15.569999999999997`}, {
                 42.191, 15.569999999999997`}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 51.223000000000006`, 46.875}, {56.973000000000006`, 
                 46.875}, {56.973000000000006`, 15.57}, {51.223000000000006`, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{60.254,
                  37.707}, {66.00399999999999, 37.707}, {66.00399999999999, 
                 15.569999999999997`}, {60.254, 15.569999999999997`}}}]}, 
               FaceForm[
                RGBColor[0.274612, 0.618881, 0.810913, 1.]], StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
                 75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
                 56.547}, {9.879000000000001, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871, 
                 13.097999999999999`}, {80.121, 13.097999999999999`}, {80.121,
                  9.097999999999999}, {9.871, 9.097999999999999}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
                 80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
                  66.54700000000001}, {45., 82.418}, {78.398, 
                  66.54700000000001}}, {{45., 86.73400000000001}, {
                  2.2230000000000003`, 66.54700000000001}, {
                  2.2230000000000003`, 62.547}, {87.777, 62.547}, {87.777, 
                  66.54700000000001}}}]}, 
               FaceForm[
                RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
               False]}, AspectRatio -> 1, Axes -> False, Background -> None, 
             Frame -> None, FrameTicks -> None, ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"CIFAR-100\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/DataRepository/\
resources/CIFAR-100_1"}, "HyperlinkURL"]}, "RowDefault"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DataResource\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"CIFAR-100 computer-vision training dataset\"", 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.011111111111111112`], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.789, 
                 7.266}, {86.20700000000001, 7.266}, {86.20700000000001, 
                 3.266}, {3.789, 3.266}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{14.129,
                  54.07}, {19.878999999999998`, 54.07}, {19.878999999999998`, 
                 15.57}, {14.129, 15.57}}}]}, 
               FaceForm[
                RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.129,
                  41.82}, {29.879, 41.82}, {29.879, 15.57}, {24.129, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 33.160000000000004`, 54.07}, {38.910000000000004`, 54.07}, {
                 38.910000000000004`, 15.57}, {33.160000000000004`, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{42.191,
                  31.781}, {47.941, 31.781}, {47.941, 15.569999999999997`}, {
                 42.191, 15.569999999999997`}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 51.223000000000006`, 46.875}, {56.973000000000006`, 
                 46.875}, {56.973000000000006`, 15.57}, {51.223000000000006`, 
                 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{60.254,
                  37.707}, {66.00399999999999, 37.707}, {66.00399999999999, 
                 15.569999999999997`}, {60.254, 15.569999999999997`}}}]}, 
               FaceForm[
                RGBColor[0.274612, 0.618881, 0.810913, 1.]], StripOnInput -> 
               False], 
              StyleBox[{
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 70.12899999999999, 54.07}, {75.87899999999999, 54.07}, {
                 75.87899999999999, 15.57}, {70.12899999999999, 15.57}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 9.879000000000001, 60.547}, {24.129, 60.547}, {24.129, 
                 56.547}, {9.879000000000001, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{9.871, 
                 13.097999999999999`}, {80.121, 13.097999999999999`}, {80.121,
                  9.097999999999999}, {9.871, 9.097999999999999}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 65.87899999999999, 60.547}, {80.12899999999999, 60.547}, {
                 80.12899999999999, 56.547}, {65.87899999999999, 56.547}}}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.469000000000001`, 
                  66.54700000000001}, {45., 82.418}, {78.398, 
                  66.54700000000001}}, {{45., 86.73400000000001}, {
                  2.2230000000000003`, 66.54700000000001}, {
                  2.2230000000000003`, 62.547}, {87.777, 62.547}, {87.777, 
                  66.54700000000001}}}]}, 
               FaceForm[
                RGBColor[0.648987, 0.648987, 0.648987, 1.]], StripOnInput -> 
               False]}, AspectRatio -> 1, Axes -> False, Background -> None, 
             Frame -> None, FrameTicks -> None, ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification]), ImageSizeCache -> {45., {0., 9.}}]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"CIFAR-100\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"\[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/DataRepository/\
resources/CIFAR-100_1"}, "HyperlinkURL"]}, "RowDefault"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DataResource\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"CIFAR-100 computer-vision training dataset\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Categories: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"Machine Learning\"", "\"Images\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ContentTypes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{",", "\",\"", "\"Image\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Keywords: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    ",", "\",\"", "\"training\"", "\"test\"", "\"vision\""}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Documentation: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   "\"https://resources.wolframcloud.com/DataRepository/\
resources/CIFAR-100_1\"", 
                    "https://resources.wolframcloud.com/DataRepository/\
resources/CIFAR-100_1"}, "HyperlinkURL"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Data Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  DynamicModuleBox[{
                   ResourceSystemClient`Private`typesetstorage$$ = 
                    ResourceSystemClient`Private`typesetstorageLocation, 
                    ResourceSystemClient`Private`info$$}, 
                   DynamicBox[
                    ToBoxes[
                    ResourceSystemClient`Private`info$$ = 
                    ResourceSystemClient`Private`resourceInfo[
                    "69f1e629-81e6-4eaa-998f-f6734fcd2cb3"]; If[
                    AssociationQ[ResourceSystemClient`Private`info$$], 
                    ResourceSystemClient`Private`typesetstorage$$[
                    Lookup[
                    ResourceSystemClient`Private`info$$, 
                    "ContentElementLocations", None]], 
                    Missing["NotAvailable"]], StandardForm]], 
                   DynamicModuleValues :> {}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"69f1e629-81e6-4eaa-998f-f6734fcd2cb3\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.0.0\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Size: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{"0", "\"B\"", "bytes", "\"Bytes\""}, 
                   "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   RowBox[{
                    "\"TestData\"", ",", "\"TestDataset\"", ",", 
                    "\"TestLabels\"", ",", "\"TrainingData\"", ",", 
                    RowBox[{"\"Tr\"", "\[Ellipsis]", "\"ta1\""}], ",", 
                    RowBox[{"\"\"", "\[Ellipsis]", "\"\""}], ",", 
                    RowBox[{"\"\"", "\[Ellipsis]", "\"\""}], ",", 
                    "\"TrainingData4\"", ",", "\"TrainingData5\"", ",", 
                    "\"TrainingDataset\"", ",", "\"TrainingLabels\""}], 
                   Short[#, 2]& ], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel",
     DisplayFunction->(
      ButtonBox[#, Active -> False, Alignment -> Left, 
       Appearance -> {
        "Default" -> 
         FrontEnd`FileName[{"Typeset", "SummaryBox"}, "Panel.9.png"]}, 
       FrameMargins -> 7, BaseStyle -> {}, 
       DefaultBaseStyle -> {"Panel", Background -> None}, BaselinePosition -> 
       Baseline]& )],
    DynamicModuleValues:>{}], "]"}],
  ResourceObject[
   Association[
   "Name" -> "CIFAR-100", "UUID" -> "69f1e629-81e6-4eaa-998f-f6734fcd2cb3", 
    "ResourceType" -> "DataResource", "Version" -> "1.0.0", "Description" -> 
    "CIFAR-100 computer-vision training dataset", "RepositoryLocation" -> 
    URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
    "ContentSize" -> Quantity[0, "Bytes"], 
    "ContentElements" -> {
     "TestData", "TestDataset", "TestLabels", "TrainingData", "TrainingData1",
       "TrainingData2", "TrainingData3", "TrainingData4", "TrainingData5", 
      "TrainingDataset", "TrainingLabels"}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7263064203333387`*^9},ExpressionUUID->"2b5e7d33-b4ab-4e34-a843-\
0263261f420c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", " ", "=", " ", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"obj", ",", " ", "\"\<TrainingDataset\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"trainingData", ",", " ", "5"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7263064289453697`*^9, 
  3.726306477550476*^9}},ExpressionUUID->"aa3b3da9-65e2-48e1-9304-\
9496cb88385f"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 5, "Length" -> 5, "InitialType" -> TypeSystem`Vector[
          TypeSystem`Struct[{"Image", "Label", "SubLabel"}, {
            TypeSystem`Atom[Image], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 5], "Shape" -> 
        TypeSystem`PackageScope`HeaderShape[
          
          Association[{All, "Image"} -> 1, {All, "Label"} -> 
           1, {All, "SubLabel"} -> 1], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`RowShape[
             Association[
             "Image" -> TypeSystem`PackageScope`AtomShape[48], "Label" -> 
              TypeSystem`PackageScope`AtomShape[153.60000000000002`], 
              "SubLabel" -> TypeSystem`PackageScope`AtomShape[86.4]]]], 
           5, {}]], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[215077779], "Type" -> 
        TypeSystem`Vector[
          TypeSystem`Struct[{"Image", "Label", "SubLabel"}, {
            TypeSystem`Atom[Image], 
            TypeSystem`Atom[String], 
            TypeSystem`Atom[String]}], 5], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[215077779]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Image\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Image\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 687210803][{
                    All, "Image"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[All, "Image"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Label\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Label\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 687210803][{
                    All, "Label"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[All, "Label"]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"SubLabel\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"SubLabel\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 687210803][{
                    All, "SubLabel"}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[All, "SubLabel"]], "Mouse"], 
                Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  TemplateBox[{"\"  \"", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJwtVGdTmmsaPrP7ZT/ul53d2dkzc072TKpHo1Gjxt7AXhCUXqSr2GLUGHsX
BRRBFHtBbAhiwwgiCIhIEBEQ7MYkM+fM7P6FfTjZmeu95+adh+u67vK8P5NK
c6l/+uGHHyr/AkIusTquooJYC/sr+AFnVTJoLAo5hfWWQqNUhJH+DF7+9P/H
l3vG6ReTzIvJIoDrmbLPkqqHhZrPSx8eZI1f5c1fVpu+yJu+KJq/KVt/U3b9
ruj9ttLxZanxm6z+97XG/2y2/Hej9XdF82/y5t/WWr+utX5Rtj8o2j7LWr+u
djxIm+6na89H0F4x7nK08HqcdjNRfD9Vfj9deSN5dyOtuVl4f7f44U5adztX
ez9TcyWqsLUV6qrh2lqYqQXp5FEcHOJRC8LWhvJwyLeTFV/kjQ+b7ffK9ruV
toeF9q+S5vup2otR7O1koXeE4BhAO/n4m7GiL7OVn+er7qTvrqXVV3PVtzPV
7oEi3btcFT1hgxy5hA0dg70cygkegb3hQV71RPmNpATtMFOs7ZgzAfV+oeab
ovmrrP3bStfDctv9UqNDgHUPEz1iskdM8Y7SbqdL7mdL7+fK7+Yrr+erbuaq
L8TlumrYMiJMmhU8AvVvDf+56NnfCh//nfz0X8V+/64Jfv4h5JfB9EBtFUxd
Bjluyv02U/F1EbS35W6p6W6p0TlMcYup56O0y0nm3VzpvaTsdpZ1M8fySUyV
nfPp2qocOT5ekhvRHfLL+xc/1QY8rvT/pdTvUUXAo6aI59zk4L7El6Ks16Y6
nIqWtEuPc3fjPk9XXs6D8t9/Xmg4FZBcIopnlHE9WXIzXXo3U3Y1VeydZl5P
MK8GKHpW6mp+hAKbNAgNqvH/sSX4aV9U0FBS+ERq5DgkdBoaMpf2WpzkP5Ed
amulaspzlMQYfXmam0u+nCm7nq+9l9a7h6kXo4yriWKAizHmzVTJ1WSRZ5zm
EVGOGvJkqPAtfJISB+2Nelr7/B/tgY+EMYEyeLKalLOen7SUES6BBI0kPl2j
JpzzmOaGgnVC5D4z2dqAuBotvZPU3kneXwPmMeb5MNU1RPaM0C7HmJ4RqltE
cvUTPrIgs1mvtghpchREkBDQ6v/P/tB/TyW8VObFfkRD1nIipZDAqdhnk6l+
h/X5bi5tvypzDRNuLE41vc26HGI9SN7fz9W6hWTXIOlcSPYO067EDLA/FyNU
r4h0MUhWl6YPxT+fgIQOxwdxw58Iop5MJ/lJoQHLGa8W0wIlEH9pykuA+ayQ
VXzCPCpyOufVSt7rHXysrjzjWlz+APzPVNn7MA4u7lxAvhBRr8XM+/GSGzH9
coh0I6Qd1uUPJfpxwp72hjxmBz+aTglczgxah7/WEhPV+LgtVJQCHraYHTyb
GjwJDZlMD5vNCpNmh65jo087CFcTFXdz7+5m3p6ykWcctIuHOx8kekXkyxHq
hYh8ISBcCPBODnajGMJPCmBHvOiP9BtLCJBlhu7jE03kZCM5cZ+UoMgPW4GH
L+aGz2WESGFhq7jovYpMF4dyPcq6mmTdTJffTpf7+PtQLh7WIyB6hgp9EJK8
AqJXgD8X4E7Y+BUShBPtx4/+dTzxpRIefVCYqsbGreWGyHKDZYgIOSZWQUrQ
vs22teM8A/QbMet2gnU1zrycYFyOF12OlzjYSBcXA/hdfDy4v24B0TVIdIOJ
CAhOPvqkF6OkQ3nRz0Sx/otZERtI0Ja4LWTMFip2G5+4XQhREBM0NTkuIf1q
vMQ76tuNi1Ha1TjdK6Z4xHTvaNFZH9rLJ7gH8OeDgBDvGiSAWZ8L6ecislOA
PuWi1RUZw8n+E0mBSkS0mpioISTuYhO0RKienrFflKEpTT/uRJ8NFTqHya7h
QoDzYbJXTPWOUD0jdI+YCfw7uZgzLgbwA3LQH6+I5h5iuoYKzwRIOzd/vzpz
LMV/6M3jpfQgFTJMjXmzi4pUo2M1hPgdUoy2JMneiXQPFoI9PB+ieIaoHhHN
M8K4HC26HCu5GCu2dRc4OJjTPtAKlIOH8wjBSYp9kOLox3u4KFcP8qA6ZzLj
5UDIj3NRj7fSAndhITv5Ibuo8F1M9DYmcp8FcbKxXgHFK6ReDtMvAbO46GoU
3KmSy9ESzwjT2o2096HBltrYqFMO1s0nnQ2QbHySk4u/YGPOOjB7tfkTeRED
oT/NRDyWQwM3YEFbBQFqzGsNLlaFjzdU5Tg5JJ//Py6Rx1eCDyB3DlLAXI67
CwA5YD7j4QFcA8RTLu6UR3BwsKcc3CGHqukrny1CdYf9Kgh7MpX8VJb9bDPn
xTbslQL+RkGCHLaRnAKGS0B28onfAW4rAEgcfDLgt3QigHMAoAL4nf0EZz/+
jIs97cMc95H0wqqjJZFKyOXlI9pCAoQRT+djn63E/ypNCZsqSNntqDiT9thH
K+39xFMezg7+xQPecGcDBJ+KgOoeYli7C753BtxikAA5a3f+SV/+SQ/S3EnS
8RtM8gXd+uaaeFJQzOrNzhCkJo/BsqXlpTujIufe1pV69WS8/oRH/M4MJMDg
XAJfr9xCsCcMS2f+GRfv4pMcPLy1BwlwwkHbucjTHrS1i2oSdhhWZR+3NFqN
QberVS2uqKYk+4tyo+bg0HJit1hvdHvOqc7TAYqvIf14OxeYJ7oFZLeg8IwP
RkDVN2YfdSAs3cijrgJrH9bGxdvAGS7e0Us45jCMw20HK9KdVaVmY9eybzLv
Gc26Y7PRoT+wH+itx3rTuX7PIel18GmnHPwnNtgT3BmP6BoggWjngHLw+vos
Q1POYRsc8B+z0Sc8AuB38Aj2PryJTdaLmg6WZ7eXV9cX5botjWHXdKAxm/Yt
Ru2hac9g2TfY9bqjaball3jchTzqyLd2gzniHFwCkLNz8CccnLEhx9ySZ2qB
AQlzB8LKRlv7MPZ+nI2DPWQTjcI6o0R8IF/ZXVzYWVzWb++ZdvWHH/eM2zvG
bZVFu2/T6Q+nek1dWFNrno+hHQGEgMqnHrStBws+X4YP2QZQQn22oTEHnAE1
2vqwVi7GxkGfsAmaJuJCDXW5tVreXacS9Jhliyc720dbWx8Xl3YWFo5Um2d7
qpM5trWPZGyBAf8AQOW7lrEpz9CQt1+Tpq9NNzfBQCGHLXnWLqStF3PcC8hR
jk6UipXenfiiI/nlLDlN3UzV8RuPF8YtG8qDje0D5fqnTZl7fdo2UnPUhTa1
wb87BxKA39Cca2qEmxoQmkqorjrdUJcNcNgAMzfDDxthloa8k6aC0wbMDi2N
F/dElPFS/TbrsA2tbkKqO+iqzrdzVfT5d1Qtu+yYX/yJQ7J0osztBcddoC0Y
SyfS3J5vaIYB8+bmgp3SZE1Fyt7bNABNZer+uwxtRYqaEa+mJ+1QoHOw8JHU
gGVCjP59rrkVYWxB7NchJLi43vhn43mv96qyLS0wW5eP2dyOPGwDzhEAIDE0
ww8aYMYmuJIet1MK0VQC/vSPZVAVK1lVnLSKC5PCg2ZzX01kBc7AX28wIHvv
srTVmbraHG1VrgQVJYQGrODijTXw40aYtQ1haS8AtOY/4kET7KAZ5osNsIN6
2GZR4jojXk6NXqPFAK0NRjyIq6SoZWzEIubNAvrNMj5mgwndLU8H2GGlbNCT
Jfnh4rSAhYIIdVGKoSrD9AEMDmFozjO2gMmCGuHfYWjMA/yywqg1aqycErNG
jVNQ40BU0hMU1HhZYSyICqov32BCVCVpAJtFUAU1aR79ZjwnaDY/dJUQqWIk
qCtTtHWZ+sZcn2ewJ3+UoGvI0dZl6eqyJegwKSZ8iRAlI8XIyfEAq+T4JVKs
FB8lA1qMRDnQpcSv05M3GNCNIqiSAVmjJSsoCWu0BBULDC5jrzpTU5u5X59r
9FUBP2jK0zXk7tZk7FSkqirT/weEt5Ar
                    "], {{0, 32}, {32, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {32, 32}, 
                    PlotRange -> {{0, 32}, {0, 32}}]}, "RowDefault"]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[1, 
                   Key["Image"]]], "Mouse"], 
                ImageSize -> {{48, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["people", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[1, 
                   Key["Label"]]], "Mouse"], 
                ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["baby", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[1, 
                   Key["SubLabel"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  TemplateBox[{"\"  \"", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJx9lfuPG9UVx1H7S3/sf0BbUVGpqvpL1AahkkLz2mR3/VrbY4/nac+M3/bM
eMZjj727Xtv7Xq/tXduzfu6u7fXuJmlBIJKiEgg/VAhalZJKIaECGlrCIxCK
VEERqnrGDhBVbaWPr869c+/3nHvuudffpSNm9hv33Xef+C1ozFT8UUGgEpZv
Q8caFn1cmPGMhWMMxwhH6W/C4Hfu/nR7p3N+p/2rnc657c6g094bsd25a7Rb
/Xaz1/qabrOhM+oO7d1GfbfZ6L/04tV3/vbRrVt33nvvzq1b7799868vvPDk
5Su97fb5TvNCp3XQbg50WsO2uafTGrSae61Gf0Sz3mvUe80vaXzZ1rVuXeu9
9OKrH97+5N13P3z//Tu3b//95ptvvPy7ynPPr0H87eaFdvPgf9Fq7I9o1gf/
QWNrr671gcZW//Jvfnv9tTevXr1+7bU3btx46/Vr1155pf/y76vb7XPtxvmh
1OG9tBrAwb0068D+vdQ10B8M6f/p6vUvvvjXZ//8/KM7n3zwwccf3v74L29d
u3bjSqd12K6Di/124/BeWnXgYMjhlxw0t4D9r6jX9uq1gY7We/WPr3322ef/
+PTTm2+/c/36Wzeuv/3n12/CRjrN/eHaQau+//9pbg0a2t5X1Gv9rWoP0Go6
5w6fvnTpysVLly9eHPHsxYvPXbr0/DCxh8Nk/heGGbiLBlIgCLK1vlYFerVK
t1rpVqrdzUq3VN5eL7bWi8219fraemNtXVst1NcK9Xp9X9MONW2wpe1vbR18
jXagaftabb9WHVSre3ep7FUqfWhHXbA3N3sblV650tuo9jdr/Y1Kt7ixs17a
LpY7xfJusbwD4+XNQXmzVyx3i+VeaQOM3nqpO2S3UNxdLWwP6aysdZZX24vL
zcXlxgKwpLf5xXp2QQPmFrTMvJbJa9PZajqzmc6UoU3NbqjTxWSqlEwXFHVN
TqxCOzRWJGUZumDE4suivCTKi4AgLUbF/Igwnw3zuRCf80fnAnwWWn8k6wvn
uOAcwAZn2QC0cwH4GoFp+QB8DWW8wVlvcMYfngNgJBABI+MLzUIL+oqy5PMl
Of80F5hm/WkPp7KBacqXpH0q7U+TnEpzKYACwwvGjNs7AxO4YMbjyzCwSnc6
4/GlveAolIGu25sajUM3LORVdZllJFpfnqZYlWQSFJfEGAl1yzir4oyK0TLJ
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
                    "], {{0, 32}, {32, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {32, 32}, 
                    PlotRange -> {{0, 32}, {0, 32}}]}, "RowDefault"]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[2, 
                   Key["Image"]]], "Mouse"], 
                ImageSize -> {{48, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["aquatic mammals", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[2, 
                   Key["Label"]]], "Mouse"], 
                ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["whale", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[2, 
                   Key["SubLabel"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  TemplateBox[{"\"  \"", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1: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
                    "], {{0, 32}, {32, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {32, 32}, 
                    PlotRange -> {{0, 32}, {0, 32}}]}, "RowDefault"]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[3, 
                   Key["Image"]]], "Mouse"], 
                ImageSize -> {{48, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["large carnivores", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[3, 
                   Key["Label"]]], "Mouse"], 
                ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["bear", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[3, 
                   Key["SubLabel"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  TemplateBox[{"\"  \"", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1: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
zo41V31qbWp6a2Zht7aYD4erqaGnm+un6yvPV1ee1WrPl5be1re/PGy8PTw4
rW+/OHq8vbFeLjV/UNDtdhuNRhAETSaT0eQAQYtW51BaomhpqIUfvTh79fXL
11+/ePX68fGXpy9+/OqbHy7ef57JPhgf/+m7r77/+os/ffP6/Gj3TWPz5VF9
Z3Xh8cbqFyfH3377/uKrd2fPjo+PHi3MzZXyhXKhODoyMjyUTkZjPndAY/Bi
2aZulu3ixbO3x4+f7u1EAoFqsfynL99//+ZNNZaolcs/fnX++/M335+/vnjU
OK/vldJpLgBMFMoXT59/d35x8er1+9OzZ419n9OpVWoEXD6juQU4DImABZgM
JoVKJ9N5HGAhlZ4Jhce9PgBP1LGBvULlUWV83A+NB72Ncnm3NLZVHt0pVjZy
YyBPBu9FByzWx5XRlxNjJ9Xxs7vTs6kUm0BAYfFXbre3dHZ2IXC3byKRbd2U
zk5JH8zCxKb5kiwNiJCYImSfBNEzwgQmhbLmbYzrJXf4vBmgmXInBECOC8hQ
fRwywcPoX6RhGmTkBgVTo9GGif3Cttbe220trTfYAMdp9dExTMSVa7QbV3Q9
LU5y13w5O5eM+hRiOp3AxCDieHwF4HoUDEjLnpLwZxmMUSqpQCPHKTQJopeL
JTp7MStw+FHX7Xo3Yqmzr9YBy3V0GG+3ET/5EP/xh7grl1FXPiXduMTp+K0a
c02OvrGxObO6MHZnLGVyaWUielTMrVg0UbciFtDcC5gn7LKYjhE3cWNWsVrB
4IppJg5pAuhf5BPuAf1VRv84GZHEdzoI3UpcBwv+Wf/Nj+V4hAWgGACqScgC
AUp5OJhLunJxdyrgTPrscZ95wK2LerSZAVsp5R7LO0pla6ViGy3a03nHYN6e
S5uqMc1EQl0ZVFYiylxIngkohnxgLKSFArIAJEpFwGLKVhr2FLPeQsZp0QsN
Op5Jw3OqJS6N3KAV6bVCGyh06SU2q8xlVUIuMODSBC0qyAIGPPoBb7O7zg9p
vU6Fzyb1umQhlypsUUbsoNsus1hFDofM41ZCHlXAC4YhsDwcyyaDqQEoHYGG
Qu54yJUehAqJYDEZKmYipWx8rJCuZJOFxEAhER3NJu/k03cKmbFcqpSK5eOh
4ZgvNwgN+R1xryXiNnqsoMemgRw6yK71O3R+u/bZYf1gc2VraW51bmpldnJt
/u7Gg/ubi9NN1Ffn9zcWD7ZW9jeWd9cX62u1g42Vk73tl4/3nx/uHe1sHG6s
HG4uN9YfbC1Or81NLt+fmJ+sTFeL98fyTfwSjBdfPGk0Wzypb9RXH2wvz28v
z+6szG0tzjT97lqtvlprbCw+rq8e7a43NpcPNlbPGvW3J0/eHD968Wj/7KB+
drDTxNPdh0+2147rD0/2N5/U1xsPF5vaNhdnmjg92D3e3X7cFLO1vrvWrNd2
VhYe1ma2lxeaczUFP9paflJfPqqvPNlZf/qL+IMm/+ujw+YIzxo7p/vbTTRn
Odp5+Et8sHPS2D7e2zze2zra3Tja3fw30eAdSw==
                    "], {{0, 32}, {32, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {32, 32}, 
                    PlotRange -> {{0, 32}, {0, 32}}]}, "RowDefault"]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[4, 
                   Key["Image"]]], "Mouse"], 
                ImageSize -> {{48, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["vehicles 1", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[4, 
                   Key["Label"]]], "Mouse"], 
                ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["bus", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[4, 
                   Key["SubLabel"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Pane[
                Annotation[
                 RawBoxes[
                  TemplateBox[{"\"  \"", 
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1: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
bF4Vi67dunbh7s1/ry3MRH0mwK1Xbd7zW9T1PJRNAaGQrYkUUlWfBZRa4zsm
aEsBLMn9K8V6oNII1VthisoRVL5UC0BJXaHg7CKpRMwFRRyphA0uua2ONZNV
bNCtuW2yGhwtZPxum1wnXwE95pjfLfzrLAZtqZghuHahGbOGVa6U1gsbrElV
CwNbfaDS8DRafrjqTWatIKRMZ0ztRqyUC4NBYxn2NdshuO4Jx3VWh8RilfTR
3Jr4ukq9ZDZvAX7LtSuXLn708eWLn0rWVrVqWb6YDKc8FkBjiigtMU2p7ay0
nem8tgAbobTOB8rDkCKR1DWrYRavdhrJRi3UQAKFmjOU0HgAtdUljaZsV2+c
k2sXvSFNCLRdv371wocXPv7g/Fu/+OX7f/yLaHFJvLGsd6o8cZvaK4vm5PmK
OZc3tpveat0fS5vgmidXtNfqwX430UWi5bIzmdGm88ZC1ZnO2hTKBV9Qq9Kv
bsi/lGpmwZg9GHJ8dO7smb++95s3f/H7X/32H++9f/nSv+ZXv5RaN9ZMq05Q
VEe8aD8yYfMcU0TxNEFnqw1fvmQVbLN5QwvxdXtBuGQJR7Zzu8YUZLTZJHaP
XGFaWJZckakW09mA1iA5//H7f3v/T+fO/v3Pv3v7+swlqVa0rF/Y8Kxb/fdy
JSMxiPJkisKTNJWhqTTaDzcarlrNXq5aSCpCUGC9YY/EtlIpBZRQgpDOF9G4
IaU/rfEnDLag0hZQS3WimbnLn1w+f+aDP1/6/COJYWXDtSqL7HjCq8ldZaft
HXRDraq72wqM2DSBAT3E3W7aUNRL0UCrZWu37dmsAoyJwomNaFbthuSetDpQ
MASLZnNE5skYvbtmuXP95urV/9y++MnMByva2RXnwopnGUrJ40k50vKg3UC/
7Wfw2ME0N+j5sK6n33UibUuzbijD6jKsatQNcF2VLEpiRUWqYXXvajZscyLL
rXXb7JZzYdlwY9OxsGVflVhX56TXZpUzC/Y7c9bZ7K6xXHJgPRDvg9QgOuGz
Ez7dR9zloq5a0jVrxnpFX4W1jYqh27YVK8psVZFr6iOw2gZJF9XXN2yzqsCq
NizecsypQyJzUq0GdlQhiTQgXvYsLnuW++041onzdI7GU902wFBpHI3mdrXF
gj6dlOXSinxG2aiYkYZdIJfT1Nq2SseSquoDWU24aDUD24aAWOm8Z4ls2CGJ
PauTBTalHrEjZ94Gt2fNc0SngNSgfjvRrgH5nKNc9cElVzqjzxaM8bgcAraS
EWmjbK0VzZ26q1K0C58eJYIIGYC7vljB6gYUJtf6ju7W4sYn8+J/LhvubDpF
O851W9KohtSLtuX/AZWDrnc=
                    "], {{0, 32}, {32, 0}}, {0, 255}, ColorFunction -> 
                    RGBColor], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    Selectable -> False], DefaultBaseStyle -> "ImageGraphics",
                     ImageSizeRaw -> {32, 32}, 
                    PlotRange -> {{0, 32}, {0, 32}}]}, "RowDefault"]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[5, 
                   Key["Image"]]], "Mouse"], 
                ImageSize -> {{48, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["reptiles", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[5, 
                   Key["Label"]]], "Mouse"], 
                ImageSize -> {{153.60000000000002`, Full}, Automatic}, 
                Alignment -> {Left, Baseline}], 
               Pane[
                Annotation["crocodile", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
                  GeneralUtilities`Slice[5, 
                   Key["SubLabel"]]], "Mouse"], 
                ImageSize -> {{86.4, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = $Failed}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 687210803][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 687210803]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[687210803][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {318., {112., 118.}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{
  3.726306610415482*^9},ExpressionUUID->"25ed9a60-c8e6-46dc-981b-\
4138cf2a149a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"labels", " ", "=", " ", 
  RowBox[{"Union", " ", "@", " ", 
   RowBox[{"Normal", " ", "@", 
    RowBox[{"trainingData", "[", 
     RowBox[{"All", ",", " ", "\"\<Label\>\""}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.726306674861952*^9, 
  3.72630672054493*^9}},ExpressionUUID->"d3e0ac87-c2d6-41f4-9376-\
844037a1aac3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"aquatic mammals\"\>", ",", "\<\"fish\"\>", 
   ",", "\<\"flowers\"\>", ",", "\<\"food containers\"\>", 
   ",", "\<\"fruit and vegetables\"\>", 
   ",", "\<\"household electrical devices\"\>", 
   ",", "\<\"household furniture\"\>", ",", "\<\"insects\"\>", 
   ",", "\<\"large carnivores\"\>", 
   ",", "\<\"large man-made outdoor things\"\>", 
   ",", "\<\"large natural outdoor scenes\"\>", 
   ",", "\<\"large omnivores and herbivores\"\>", 
   ",", "\<\"medium-sized mammals\"\>", 
   ",", "\<\"non-insect invertebrates\"\>", ",", "\<\"people\"\>", 
   ",", "\<\"reptiles\"\>", ",", "\<\"small mammals\"\>", 
   ",", "\<\"trees\"\>", ",", "\<\"vehicles 1\"\>", 
   ",", "\<\"vehicles 2\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7263067213426514`*^9},ExpressionUUID->"98be610f-371a-4d87-9b12-\
3319416da4ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sublabels", " ", "=", " ", 
  RowBox[{"Union", " ", "@", " ", 
   RowBox[{"Normal", " ", "@", 
    RowBox[{"trainingData", "[", 
     RowBox[{"All", ",", " ", "\"\<SubLabel\>\""}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7263067475047636`*^9, 
  3.726306770375995*^9}},ExpressionUUID->"29c13b58-ff03-4e4f-9655-\
82dbec093933"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"apple\"\>", ",", "\<\"aquarium fish\"\>", ",", "\<\"baby\"\>", 
   ",", "\<\"bear\"\>", ",", "\<\"beaver\"\>", ",", "\<\"bed\"\>", 
   ",", "\<\"bee\"\>", ",", "\<\"beetle\"\>", ",", "\<\"bicycle\"\>", 
   ",", "\<\"bottle\"\>", ",", "\<\"bowl\"\>", ",", "\<\"boy\"\>", 
   ",", "\<\"bridge\"\>", ",", "\<\"bus\"\>", ",", "\<\"butterfly\"\>", 
   ",", "\<\"camel\"\>", ",", "\<\"can\"\>", ",", "\<\"castle\"\>", 
   ",", "\<\"caterpillar\"\>", ",", "\<\"cattle\"\>", ",", "\<\"chair\"\>", 
   ",", "\<\"chimpanzee\"\>", ",", "\<\"clock\"\>", ",", "\<\"cloud\"\>", 
   ",", "\<\"cockroach\"\>", ",", "\<\"computer keyboard\"\>", 
   ",", "\<\"couch\"\>", ",", "\<\"crab\"\>", ",", "\<\"crocodile\"\>", 
   ",", "\<\"cup\"\>", ",", "\<\"dinosaur\"\>", ",", "\<\"dolphin\"\>", 
   ",", "\<\"elephant\"\>", ",", "\<\"flatfish\"\>", ",", "\<\"forest\"\>", 
   ",", "\<\"fox\"\>", ",", "\<\"girl\"\>", ",", "\<\"hamster\"\>", 
   ",", "\<\"house\"\>", ",", "\<\"kangaroo\"\>", ",", "\<\"lamp\"\>", 
   ",", "\<\"lawn-mower\"\>", ",", "\<\"leopard\"\>", ",", "\<\"lion\"\>", 
   ",", "\<\"lizard\"\>", ",", "\<\"lobster\"\>", ",", "\<\"man\"\>", 
   ",", "\<\"maple tree\"\>", ",", "\<\"motorcycle\"\>", 
   ",", "\<\"mountain\"\>", ",", "\<\"mouse\"\>", ",", "\<\"mushroom\"\>", 
   ",", "\<\"oak tree\"\>", ",", "\<\"orange\"\>", ",", "\<\"orchid\"\>", 
   ",", "\<\"otter\"\>", ",", "\<\"palm tree\"\>", ",", "\<\"pear\"\>", 
   ",", "\<\"pickup truck\"\>", ",", "\<\"pine tree\"\>", 
   ",", "\<\"plain\"\>", ",", "\<\"plate\"\>", ",", "\<\"poppy\"\>", 
   ",", "\<\"porcupine\"\>", ",", "\<\"possum\"\>", ",", "\<\"rabbit\"\>", 
   ",", "\<\"raccoon\"\>", ",", "\<\"ray\"\>", ",", "\<\"road\"\>", 
   ",", "\<\"rocket\"\>", ",", "\<\"rose\"\>", ",", "\<\"sea\"\>", 
   ",", "\<\"seal\"\>", ",", "\<\"shark\"\>", ",", "\<\"shrew\"\>", 
   ",", "\<\"skunk\"\>", ",", "\<\"skyscraper\"\>", ",", "\<\"snail\"\>", 
   ",", "\<\"snake\"\>", ",", "\<\"spider\"\>", ",", "\<\"squirrel\"\>", ",",
    "\<\"streetcar\"\>", ",", "\<\"sunflower\"\>", 
   ",", "\<\"sweet pepper\"\>", ",", "\<\"table\"\>", ",", "\<\"tank\"\>", 
   ",", "\<\"telephone\"\>", ",", "\<\"television\"\>", ",", "\<\"tiger\"\>", 
   ",", "\<\"tractor\"\>", ",", "\<\"train\"\>", ",", "\<\"trout\"\>", 
   ",", "\<\"tulip\"\>", ",", "\<\"turtle\"\>", ",", "\<\"wardrobe\"\>", 
   ",", "\<\"whale\"\>", ",", "\<\"willow tree\"\>", ",", "\<\"wolf\"\>", 
   ",", "\<\"woman\"\>", ",", "\<\"worm\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.726306771310602*^9},ExpressionUUID->"d215a721-420d-435f-9639-\
bc9e1a475ebe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"convnet", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", " ", "5"}], "]"}], ",", " ", "Ramp", ",", " ", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", " ", "2"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", " ", "5"}], "]"}], ",", " ", "Ramp", ",", " ", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", " ", "2"}], "]"}], ",", "\[IndentingNewLine]", "500",
       ",", " ", "Ramp"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"32", ",", " ", "32"}], "}"}]}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.726306809370282*^9, 
  3.7263068956194987`*^9}},ExpressionUUID->"14c4c3af-1178-4fbc-a186-\
6ee3be4535ed"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{20, 3, 5, 5}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
               "$OutputSize" -> {28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 28, 28}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {20, 28, 28}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 28, 28}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 20, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {14, 14}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 14, 14}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{50, 20, 5, 5}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               20, "$GroupNumber" -> 1, "$InputSize" -> {14, 14}, 
               "$OutputSize" -> {10, 10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 14, 14}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 10, 10}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {50, 10, 10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 10, 10}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 10, 10}, NeuralNetworks`RealT]]], 
           "6" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 50, "$InputSize" -> {10, 10}, 
               "$OutputSize" -> {5, 5}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 10, 10}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 5, 5}, NeuralNetworks`RealT]]], 
           "7" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{500, 1250}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               1250, "$InputDimensions" -> {50, 5, 5}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 5, 5}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", "ColorChannels" -> 
              3, "MeanImage" -> None, "VarianceImage" -> None], 
             NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"32\"", "\"32\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"28\"", "\"28\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"28\"", "\"28\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"14\"", "\"14\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"10\"", "\"10\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"10\"", "\"10\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"5\"", "\"5\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{265., {97., 103.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.726306903499509*^9},ExpressionUUID->"b5525122-13ca-48c9-91b0-\
78665aebea94"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"convnet", ",", "100", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}], ",", "20", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Image\>\"", "]"}], "\[Rule]", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"2", "\[Rule]", 
         RowBox[{"3", "\[Rule]", 
          RowBox[{"NetPort", "[", "\"\<SubLabel\>\"", "]"}]}]}]}]}], ",", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"4", "\[Rule]", 
        RowBox[{"5", "\[Rule]", 
         RowBox[{"NetPort", "[", "\"\<Label\>\"", "]"}]}]}]}]}], "}"}], ",", 
    RowBox[{"\"\<Label\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "labels"}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<SubLabel\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "sublabels"}], "}"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7263073179922647`*^9, 3.7263074618602285`*^9}, {
   3.7263074970073643`*^9, 3.7263074974250283`*^9}, 
   3.7263076243838186`*^9},ExpressionUUID->"1513dabc-460c-4af3-9b34-\
50a75da8a7d5"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {4, 5}, {3, 6}, {6, 7}, {7, 8}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "Image", "1", "2", "3", "SubLabel", "4", "5", "Label"}, {Null, 
               GrayLevel[0], 
               GrayLevel[0.4], 
               RGBColor[0.5, 0.32, 0.99]}, {1, 2, 3, 4, 1, 3, 4, 1}, {Null, 
               HoldForm[
                NetChain[
                 NeuralNetworks`Private`UniqueSkeleton[8, 57619]]], 
               LinearLayer, SoftmaxLayer}, {
               NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "Image"], 
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Outputs", "SubLabel"], 
                 NeuralNetworks`NetPath["Nodes", "4"], 
                 NeuralNetworks`NetPath["Nodes", "5"], 
                 NeuralNetworks`NetPath["Outputs", "Label"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Image" -> NetEncoder["Image", 
                  Association[
                  "ImageSize" -> {32, 32}, "ColorSpace" -> "RGB", 
                   "ColorChannels" -> 3, "MeanImage" -> None, "VarianceImage" -> 
                   None], 
                  NeuralNetworks`TensorT[{3, 32, 32}, NeuralNetworks`RealT]]], 
               Association["SubLabel" -> NetDecoder["Class", 
                  Association[
                  "Labels" -> {
                    "apple", "aquarium fish", "baby", "bear", "beaver", "bed",
                     "bee", "beetle", "bicycle", "bottle", "bowl", "boy", 
                    "bridge", "bus", "butterfly", "camel", "can", "castle", 
                    "caterpillar", "cattle", "chair", "chimpanzee", "clock", 
                    "cloud", "cockroach", "computer keyboard", "couch", 
                    "crab", "crocodile", "cup", "dinosaur", "dolphin", 
                    "elephant", "flatfish", "forest", "fox", "girl", 
                    "hamster", "house", "kangaroo", "lamp", "lawn-mower", 
                    "leopard", "lion", "lizard", "lobster", "man", 
                    "maple tree", "motorcycle", "mountain", "mouse", 
                    "mushroom", "oak tree", "orange", "orchid", "otter", 
                    "palm tree", "pear", "pickup truck", "pine tree", "plain",
                     "plate", "poppy", "porcupine", "possum", "rabbit", 
                    "raccoon", "ray", "road", "rocket", "rose", "sea", "seal",
                     "shark", "shrew", "skunk", "skyscraper", "snail", 
                    "snake", "spider", "squirrel", "streetcar", "sunflower", 
                    "sweet pepper", "table", "tank", "telephone", 
                    "television", "tiger", "tractor", "train", "trout", 
                    "tulip", "turtle", "wardrobe", "whale", "willow tree", 
                    "wolf", "woman", "worm"}, "Dimensions" -> 100], 
                  NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                "Label" -> NetDecoder["Class", 
                  Association[
                  "Labels" -> {
                    "aquatic mammals", "fish", "flowers", "food containers", 
                    "fruit and vegetables", "household electrical devices", 
                    "household furniture", "insects", "large carnivores", 
                    "large man-made outdoor things", 
                    "large natural outdoor scenes", 
                    "large omnivores and herbivores", "medium-sized mammals", 
                    "non-insect invertebrates", "people", "reptiles", 
                    "small mammals", "trees", "vehicles 1", "vehicles 2"}, 
                   "Dimensions" -> 20], 
                  NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
               Association[
               "1" -> Association[
                 "Type" -> "Chain", "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 3, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {28, 28}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 28, 28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 28, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 28, 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 20, 
                    "$InputSize" -> {28, 28}, "$OutputSize" -> {14, 14}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 28, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 14, 14}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 20, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 20, "$GroupNumber" -> 1, 
                    "$InputSize" -> {14, 14}, "$OutputSize" -> {10, 10}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 10, 10}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 10, 10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 10, 10}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Channels" -> 50, 
                    "$InputSize" -> {10, 10}, "$OutputSize" -> {5, 5}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 5, 5}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{500, 1250}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 1250, "$InputDimensions" -> {50, 5, 5}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 5, 5}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "8", "Outputs", "Output"]}, "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                "2" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{100, 500}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                  "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                "4" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{20, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                  "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "5" -> 
                Association[
                 "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{359., {74., 80.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7263074636878157`*^9, 3.726307498662985*^9, 
  3.7263076259005537`*^9},ExpressionUUID->"ff63482a-e1ec-4a78-84cb-\
f21663b4f1db"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"trained", " ", "=", " ", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", " ", "trainingData"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.726308191751004*^9, 
  3.726308203563511*^9}},ExpressionUUID->"84341861-a102-4756-8dc4-\
534f1563dfec"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"chain", " ", "=", " ", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{"Ramp", ",", " ", "LogisticSigmoid"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"NetGraph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"chain", ",", " ", 
     RowBox[{"LinearLayer", "[", "3", "]"}]}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"1", "\[Rule]", "2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.72630956531847*^9, 
  3.72630962216864*^9}},ExpressionUUID->"1f500af6-1324-42dc-8801-\
7fd418dbb637"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {3, 1}, {2,
               4}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "Input", "Output"}, {
               GrayLevel[0], 
               GrayLevel[0.4], Null}, {1, 2, 3, 3}, {
               HoldForm[
                NetChain[
                 NeuralNetworks`Private`UniqueSkeleton[2, 13099]]], 
               LinearLayer, Null}, {
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Chain", "Nodes" -> 
                  Association[
                   "1" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
                  "Edges" -> {
                   NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{3, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{234., {34.5, 40.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7263096244254403`*^9},ExpressionUUID->"9944611e-2909-4a80-9dd8-\
66eb73e129b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Ramp", ",", " ", "LogisticSigmoid", ",", " ", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "2"}], "}"}], "\[Rule]", "3"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"NetChain", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", " ", "net"}], "}"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7263096475132484`*^9, 3.7263097187119684`*^9}, {
  3.7263097810314875`*^9, 
  3.726309799958805*^9}},ExpressionUUID->"dfa164f6-18fb-40da-a70d-\
0ef8538d99b6"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> 
               NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[
                 NeuralNetworks`ListT[
                 NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                 NeuralNetworks`RealT]], "Nodes" -> 
             Association[
              "1" -> Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "2" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> 
                   NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                   "$Dimensions" -> 
                   NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                 Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "3" -> 
               Association[
                "Type" -> "Catenate", "Arrays" -> Association[], "Parameters" -> 
                 Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}, "$InputCount" -> 2, 
                   "$OutputShape" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[
             NeuralNetworks`ListT[
             NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
             NeuralNetworks`RealT]]], NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"tensor\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{150., {29., 35.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7263098495006046`*^9},ExpressionUUID->"08c28a95-f902-4c82-b270-\
b409511e85ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "Ramp", ",", " ", "2", ",", " ", "Tanh"}], "}"}], 
    ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"2", "\[Rule]", " ", 
       RowBox[{"3", "\[Rule]", " ", "4"}]}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.726309778143434*^9, 3.7263097791692963`*^9}, {
  3.726310015493496*^9, 
  3.726310047739238*^9}},ExpressionUUID->"4c82cf7f-3e74-4365-a8d4-\
bb0ec8f0f3dd"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {5, 1}, {4, 6}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "3", "4", "Input", "Output"}, {
               GrayLevel[0.4], 
               RGBColor[0.29, 0.29, 0.83], Null}, {1, 2, 1, 2, 3, 3}, {
              LinearLayer, ElementwiseLayer, Null}, {
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]}, {
              None, Ramp, None, Tanh, None, None}]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Nodes", "4"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NeuralNetworks`TensorT[
                  NeuralNetworks`ListT[
                  NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                  NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{1, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                  Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{2, 1}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{362., {35., 41.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.726310055447757*^9},ExpressionUUID->"ae0239c6-bc42-4a37-a3bc-\
1a66700734f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", "net", "]"}]], "Input",
 CellChangeTimes->{{3.726310338139594*^9, 
  3.7263103420394807`*^9}},ExpressionUUID->"163b9ceb-9eb0-4aa2-863a-\
f3cd832a4f2a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TemplateBox[{RowBox[{
        StyleBox[
         TagBox["LinearLayer", "SummaryHead"], "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{Typeset`open = False}, 
         PanelBox[
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquarePlusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = True), Appearance -> None,
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                OverlayBox[{
                  GraphicsBox[
                   
                   GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {
                    1.5, 1}, {1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                   GrayLevel[0.65]], 
                  StyleBox["uninitialized", 
                   RGBColor[0.66, 0, 0], FontSize -> 8]}, 
                 Alignment -> {Center, Center}], 
                GridBox[{{
                   ItemBox[
                    StyleBox["Parameters", Bold]], 
                   ItemBox[""]}, {
                   StyleBox[
                    
                    TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   StyleBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"1\""}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquareMinusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = False), Appearance -> 
                  None, Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                OverlayBox[{
                  GraphicsBox[
                   
                   GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {
                    1.5, 1}, {1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                   GrayLevel[0.65]], 
                  StyleBox["uninitialized", 
                   RGBColor[0.66, 0, 0], FontSize -> 8]}, 
                 Alignment -> {Center, Center}], 
                GridBox[{{
                   ItemBox[
                    StyleBox["Parameters", Bold]], 
                   ItemBox[""]}, {
                   StyleBox[
                    
                    TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   StyleBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"1\""}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                   ItemBox[
                    StyleBox["Arrays", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                   ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                   StyleBox[
                    TemplateBox[{
                    StyleBox["\"Weights\"", 
                    RGBColor[0.58, 0.25, 0.25]], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"\[DottedSquare]\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{
                    StyleBox["\"Biases\"", 
                    RGBColor[0.58, 0.25, 0.25]], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"optional\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "SummaryItem"]}, {
                   ItemBox[
                    StyleBox["Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                   ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                   StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox["\"tensor\"", "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
          Baseline, 
          BaseStyle -> {
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("LinearLayer[<>]"& )],
    False,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TemplateBox[{RowBox[{
        StyleBox[
         TagBox["ElementwiseLayer", "SummaryHead"], 
         "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{Typeset`open = False}, 
         PanelBox[
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquarePlusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = True), Appearance -> None,
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                GridBox[{{
                   ItemBox[
                    StyleBox["Parameters", Bold]], 
                   ItemBox[""]}, {
                   StyleBox[
                    TemplateBox[{"\"Function\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    PaneBox[
                    "Ramp", 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> True}, 
                    ImageSize -> {250}], "SummaryItem"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquareMinusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = False), Appearance -> 
                  None, Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                GridBox[{{
                   ItemBox[
                    StyleBox["Parameters", Bold]], 
                   ItemBox[""]}, {
                   StyleBox[
                    TemplateBox[{"\"Function\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    PaneBox[
                    "Ramp", 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> True}, 
                    ImageSize -> {250}], "SummaryItem"]}, {
                   ItemBox[
                    StyleBox["Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                   ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                   StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
          Baseline, 
          BaseStyle -> {
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("ElementwiseLayer[<>]"& )],
    False,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TemplateBox[{RowBox[{
        StyleBox[
         TagBox["LinearLayer", "SummaryHead"], "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{Typeset`open = False}, 
         PanelBox[
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquarePlusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = True), Appearance -> None,
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                OverlayBox[{
                  GraphicsBox[
                   
                   GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {
                    1.5, 1}, {1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                   GrayLevel[0.65]], 
                  StyleBox["uninitialized", 
                   RGBColor[0.66, 0, 0], FontSize -> 8]}, 
                 Alignment -> {Center, Center}], 
                GridBox[{{
                   ItemBox[
                    StyleBox["Parameters", Bold]], 
                   ItemBox[""]}, {
                   StyleBox[
                    
                    TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   StyleBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquareMinusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = False), Appearance -> 
                  None, Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                OverlayBox[{
                  GraphicsBox[
                   
                   GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {
                    1.5, 1}, {1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37, BaseStyle -> 
                   GrayLevel[0.65]], 
                  StyleBox["uninitialized", 
                   RGBColor[0.66, 0, 0], FontSize -> 8]}, 
                 Alignment -> {Center, Center}], 
                GridBox[{{
                   ItemBox[
                    StyleBox["Parameters", Bold]], 
                   ItemBox[""]}, {
                   StyleBox[
                    
                    TemplateBox[{"\"OutputDimensions\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   StyleBox[
                    
                    TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                   ItemBox[
                    StyleBox["Arrays", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                   ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                   StyleBox[
                    TemplateBox[{
                    StyleBox["\"Weights\"", 
                    RGBColor[0.58, 0.25, 0.25]], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{
                    StyleBox["\"Biases\"", 
                    RGBColor[0.58, 0.25, 0.25]], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"optional\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "SummaryItem"]}, {
                   ItemBox[
                    StyleBox["Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                   ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                   StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
          Baseline, 
          BaseStyle -> {
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("LinearLayer[<>]"& )],
    False,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TemplateBox[{RowBox[{
        StyleBox[
         TagBox["ElementwiseLayer", "SummaryHead"], 
         "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{Typeset`open = False}, 
         PanelBox[
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquarePlusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = True), Appearance -> None,
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                GridBox[{{
                   ItemBox[
                    StyleBox["Parameters", Bold]], 
                   ItemBox[""]}, {
                   StyleBox[
                    TemplateBox[{"\"Function\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    PaneBox[
                    "Tanh", 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> True}, 
                    ImageSize -> {250}], "SummaryItem"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquareMinusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = False), Appearance -> 
                  None, Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                GraphicsBox[
                 
                 GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                   1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                GridBox[{{
                   ItemBox[
                    StyleBox["Parameters", Bold]], 
                   ItemBox[""]}, {
                   StyleBox[
                    TemplateBox[{"\"Function\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    PaneBox[
                    "Tanh", 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> True}, 
                    ImageSize -> {250}], "SummaryItem"]}, {
                   ItemBox[
                    StyleBox["Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                   ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                   StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
          Baseline, 
          BaseStyle -> {
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("ElementwiseLayer[<>]"& )],
    False,
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7263103460426545`*^9},ExpressionUUID->"df39b9ea-bb6f-4f86-b2ba-\
44f8627a52ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"LinearLayer", "[", "2", "]"}], ",", " ", "Ramp", ",", " ", 
      RowBox[{"LinearLayer", "[", "3", "]"}], ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}], ",", " ", 
      RowBox[{"MeanSquaredLossLayer", "[", "]"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"2", "\[Rule]", 
       RowBox[{"3", "\[Rule]", 
        RowBox[{"4", "\[Rule]", "5"}]}]}]}], "}"}], ",", " ", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7263103777642565`*^9, 
  3.726310468655215*^9}},ExpressionUUID->"f7601b86-329e-483a-87d8-\
56ad7a283e60"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = 1}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {2, 3}, {3,
               4}, {4, 5}, {6, 1}, {7, 5}, {5, 8}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "1", "2", "3", "4", "5", "Input", "Target", "Loss"}, {
               GrayLevel[0.4], 
               RGBColor[0.29, 0.29, 0.83], 
               RGBColor[0.5, 0.32, 0.99], 
               RGBColor[1., 0.4, 1.], Null}, {1, 2, 1, 3, 4, 5, 5, 5}, {
              LinearLayer, Ramp, SoftmaxLayer, MeanSquaredLossLayer, Null}, {
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Nodes", "2"], 
                 NeuralNetworks`NetPath["Nodes", "3"], 
                 NeuralNetworks`NetPath["Nodes", "4"], 
                 NeuralNetworks`NetPath["Nodes", "5"], 
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath["Inputs", "Target"], 
                 NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association["Input" -> NetEncoder["Scalar", 
                  Association[], 
                  NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                "Target" -> 
                NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
               Association[
               "Loss" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{2, 1}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "2" -> 
                Association[
                 "Type" -> "Elementwise", "Arrays" -> Association[], 
                  "Parameters" -> 
                  Association[
                   "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {2}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "3" -> 
                Association[
                 "Type" -> "Linear", "Arrays" -> 
                  Association[
                   "Weights" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                  "Parameters" -> 
                  Association[
                   "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "4" -> 
                Association[
                 "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "5" -> 
                Association[
                 "Type" -> "MeanSquaredLoss", "Arrays" -> Association[], 
                  "Parameters" -> Association["$Dimensions" -> {3}], "Inputs" -> 
                  Association[
                   "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                  "Outputs" -> 
                  Association[
                   "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], Alignment -> Center], 
             Nothing]}], GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{420., {171.5, 177.5}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7263104746284018`*^9},ExpressionUUID->"7a2afd54-1e93-4ba2-bb53-\
e56fe39b8f08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TraditionalForm", "[", "net", "]"}]], "Input",
 CellChangeTimes->{{3.726310531759116*^9, 
  3.726310570798831*^9}},ExpressionUUID->"7df6facc-fe9e-43de-996b-\
138aa1820267"],

Cell[BoxData[
 FormBox[
  TemplateBox[{GraphicsBox[{{
       GrayLevel[0.7], {
        LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
         2.4492935982947064`*^-16}}], 
        LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
         1.8369701987210297`*^-16}}], 
        LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
         1.2246467991473532`*^-16}}], 
        LineBox[{{-2., 1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
        LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
         3.061616997868383*^-16}}], 
        LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999, 1.}}], 
        LineBox[{{-0.9999999999999999, 1.}, {6.123233995736766*^-17, 1.}}]}}, {
       InsetBox[
        GraphicsBox[
         StyleBox[
          
          PolygonBox[{{-1., 0.3333333333333333}, {0., 
           0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
           0.3333333333333333}}], 
          GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
        2.694222958124177*^-16}, {-0.25, 0}, 
        Offset[8], {1., -6.123233995736767*^-17}], 
       InsetBox[
        GraphicsBox[
         StyleBox[
          
          PolygonBox[{{-1., 0.3333333333333333}, {0., 
           0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
           0.3333333333333333}}], 
          GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
        2.0818995585505003`*^-16}, {-0.25, 0}, 
        Offset[8], {1., -6.123233995736767*^-17}], 
       InsetBox[
        GraphicsBox[
         StyleBox[
          
          PolygonBox[{{-1., 0.3333333333333333}, {0., 
           0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
           0.3333333333333333}}], 
          GrayLevel[0.7], StripOnInput -> False]], {-2.4000000000000004`, 
        1.4695761589768238`*^-16}, {-0.25, 0}, 
        Offset[8], {1., -6.123233995736765*^-17}], 
       InsetBox[
        GraphicsBox[
         StyleBox[
          
          PolygonBox[{{-1., 0.3333333333333333}, {0., 
           0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
           0.3333333333333333}}], 
          GrayLevel[0.7], StripOnInput -> False]], {-1.4, 0.6}, {-0.25, 0}, 
        Offset[8], {1., 0.9999999999999999}], 
       InsetBox[
        GraphicsBox[
         StyleBox[
          
          PolygonBox[{{-1., 0.3333333333333333}, {0., 
           0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
           0.3333333333333333}}], 
          GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
        3.3065463576978537`*^-16}, {-0.25, 0}, 
        Offset[8], {1., -6.123233995736762*^-17}], 
       InsetBox[
        GraphicsBox[
         StyleBox[
          
          PolygonBox[{{-1., 0.3333333333333333}, {0., 
           0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
           0.3333333333333333}}], 
          GrayLevel[0.7], StripOnInput -> False]], {-1.4, 1.}, {-0.25, 0}, 
        Offset[8], {1., -2.220446049250313*^-16}], 
       InsetBox[
        GraphicsBox[
         StyleBox[
          
          PolygonBox[{{-1., 0.3333333333333333}, {0., 
           0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
           0.3333333333333333}}], 
          GrayLevel[0.7], StripOnInput -> False]], {-0.3999999999999999, 
        1.}, {-0.25, 0}, 
        Offset[8], {1., 0.}]}, {
       GrayLevel[0], {{
         AbsolutePointSize[5], 
         GrayLevel[0.4], 
         PointBox[{-5., 3.061616997868383*^-16}]}, {
         AbsolutePointSize[5], 
         RGBColor[0.29, 0.29, 0.83], 
         PointBox[{-4., 2.4492935982947064`*^-16}]}, {
         AbsolutePointSize[5], 
         GrayLevel[0.4], 
         PointBox[{-3., 1.8369701987210297`*^-16}]}, {
         AbsolutePointSize[5], 
         RGBColor[0.5, 0.32, 0.99], 
         PointBox[{-2., 1.2246467991473532`*^-16}]}, {
         AbsolutePointSize[5], 
         RGBColor[1., 0.4, 1.], 
         PointBox[{-0.9999999999999999, 1.}]}, {
         AbsolutePointSize[4], 
         GrayLevel[0.5], 
         PointBox[{-6., 3.6739403974420594`*^-16}]}, {
         AbsolutePointSize[4], 
         GrayLevel[0.5], 
         PointBox[{-2., 1.0000000000000002`}]}, {
         AbsolutePointSize[4], 
         GrayLevel[0.5], 
         PointBox[{6.123233995736766*^-17, 1.}]}}}, {{{
         InsetBox[
          FormBox["\"1\"", TraditionalForm], 
          NCache[
           Offset[{0, 
             Rational[-11, 2]}, {-5., 3.061616997868383*^-16}], 
           Offset[{0, -5.5}, {-5., 3.061616997868383*^-16}]], {0, 1.}, 
          Automatic, {1, 0}], 
         InsetBox[
          FormBox["\"2\"", TraditionalForm], 
          NCache[
           Offset[{0, 
             Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
           Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], {0, 1.}, 
          Automatic, {1, 0}], 
         InsetBox[
          FormBox["\"3\"", TraditionalForm], 
          NCache[
           Offset[{0, 
             Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
           Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], {0, 1.}, 
          Automatic, {1, 0}], 
         InsetBox[
          FormBox["\"4\"", TraditionalForm], 
          NCache[
           Offset[{0, 
             Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
           Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], {0, 1.}, 
          Automatic, {1, 0}], 
         InsetBox[
          FormBox["\"5\"", TraditionalForm], 
          NCache[
           Offset[{0, 
             Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
           Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], {0, 1.}, 
          Automatic, {1, 0}], 
         InsetBox[
          FormBox["\"input\"", TraditionalForm], 
          Offset[{0, -5}, {-6., 3.6739403974420594`*^-16}], {0, 1.}, 
          Automatic, {1, 0}], 
         InsetBox[
          FormBox["\"target\"", TraditionalForm], 
          Offset[{0, -5}, {-2., 1.0000000000000002`}], {0, 1.}, Automatic, {1,
           0}], 
         InsetBox[
          FormBox["\"loss\"", TraditionalForm], 
          Offset[{0, -5}, {6.123233995736766*^-17, 1.}], {0, 1.}, Automatic, {
          1, 0}]}}, 
       StyleBox[{
         InsetBox[
          FormBox[
           
           TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
            "RowWithSeparators"], TraditionalForm], 
          
          Offset[{3.367778697655222*^-16, 5.5}, {-4.4, 
           2.694222958124177*^-16}], {0., -0.17}, Automatic, {
          1., -6.123233995736767*^-17}], 
         InsetBox[
          FormBox[
           
           TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""}, 
            "RowWithSeparators"], TraditionalForm], 
          
          Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
           2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
          1., -6.123233995736767*^-17}], 
         InsetBox[
          FormBox[
           
           TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
            "RowWithSeparators"], TraditionalForm], 
          
          Offset[{3.3677786976552205`*^-16, 5.5}, {-2.4000000000000004`, 
           1.4695761589768238`*^-16}], {0., -0.17}, Automatic, {
          1., -6.123233995736765*^-17}], 
         InsetBox[
          FormBox[
           
           TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
            "RowWithSeparators"], TraditionalForm], 
          Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 0.6}], {
          0., -0.17}, Automatic, {0.7071067811865476, 0.7071067811865475}], 
         InsetBox[
          FormBox[
           
           TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"1\""}, 
            "RowWithSeparators"], TraditionalForm], 
          
          Offset[{3.3677786976552195`*^-16, 5.5}, {-5.4, 
           3.3065463576978537`*^-16}], {0., -0.17}, Automatic, {
          1., -6.123233995736762*^-17}], 
         InsetBox[
          FormBox[
           
           TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"3\""}, 
            "RowWithSeparators"], TraditionalForm], 
          Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {0., -0.17}, 
          Automatic, {1., -2.220446049250313*^-16}], 
         InsetBox[
          FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
          Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17}, 
          Automatic, {1., 0.}]}, FontColor -> GrayLevel[0.5], FontSize -> 8, 
        FontWeight -> "Thin", StripOnInput -> False]}}, 
     ImageSize -> {420., 104.67999999999999`}, AspectRatio -> Full, 
     PlotRangePadding -> 0, 
     ImagePadding -> {{19.5, 16.5}, {20.5, 20.179999999999993`}}, 
     ImageMargins -> {{0, 0}, {5, 5}}, 
     BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}],FormBox[
     FormBox[
      TemplateBox[{
        StyleBox["\"linear\"", 
         GrayLevel[0.35], StripOnInput -> False], 
        StyleBox["\"ReLU\"", 
         GrayLevel[0.35], StripOnInput -> False], 
        StyleBox["\"softmax\"", 
         GrayLevel[0.35], StripOnInput -> False], 
        StyleBox["\"mean squared error\"", 
         GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
       DisplayFunction -> (FormBox[
         StyleBox[
          StyleBox[
           PaneBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.4], 
                    AbsolutePointSize[5]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.4], 
                    AbsolutePointSize[5]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                   ImageSize -> {12, 12}, PlotRangePadding -> None, 
                   ImagePadding -> Automatic, 
                   BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                TemplateBox[{
                  GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0.32, 0.99], 
                    AbsolutePointSize[5]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0.32, 0.99], 
                    AbsolutePointSize[5]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                   ImageSize -> {12, 12}, PlotRangePadding -> None, 
                   ImagePadding -> Automatic, 
                   BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #3}, "RowDefault"]}, {
                TemplateBox[{
                  GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83], 
                    AbsolutePointSize[5]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83], 
                    AbsolutePointSize[5]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                   ImageSize -> {12, 12}, PlotRangePadding -> None, 
                   ImagePadding -> Automatic, 
                   BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"], 
                TemplateBox[{
                  GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.], 
                    AbsolutePointSize[5]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1., 0.4, 1.], 
                    AbsolutePointSize[5]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                   ImageSize -> {12, 12}, PlotRangePadding -> None, 
                   ImagePadding -> Automatic, 
                   BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #4}, "RowDefault"]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"],
             Alignment -> Left, AppearanceElements -> None, 
            ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
            "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
          False], TraditionalForm]& ), InterpretationFunction :> None, 
       Editable -> True], TraditionalForm], TraditionalForm]},
   "Legended",
   DisplayFunction->(GridBox[{{
       TagBox[
        ItemBox[
         PaneBox[
          TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
          BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
        "SkipImageSizeLevel"]}, {
       ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> Automatic, 
     BaselinePosition -> {1, 1}]& ),
   Editable->True,
   InterpretationFunction->(RowBox[{"Legended", "[", 
      RowBox[{#, ",", 
        RowBox[{"Placed", "[", 
          RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )], 
  TraditionalForm]], "Output",
 CellChangeTimes->{
  3.7263105732165384`*^9},ExpressionUUID->"53c0eceb-6fb6-4605-a3c8-\
84ce351539f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"edges", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"NetPort", "[", "\"\<matrix\>\"", "]"}], "\[Rule]", "1"}], ",", 
    " ", 
    RowBox[{
     RowBox[{"NetPort", "[", "\"\<vector\>\"", "]"}], "\[Rule]", "1"}]}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.726310602289506*^9, 
  3.726310643917548*^9}},ExpressionUUID->"6fb75d6f-d266-4307-93d5-\
1abccdcc85da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"NetPort", "[", "\<\"matrix\"\>", "]"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"NetPort", "[", "\<\"vector\"\>", "]"}], "\[Rule]", "1"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.726310627437228*^9, 
  3.7263106525691934`*^9}},ExpressionUUID->"92e96d87-1eee-4a67-8eff-\
f16ce046ce61"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetGraph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"DotLayer", "[", "]"}], "}"}], ",", " ", "edges", ",", " ", 
   RowBox[{"\"\<vector\>\"", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", " ", 
   RowBox[{"\"\<matrix\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7263106996055217`*^9, 
  3.726310742635148*^9}},ExpressionUUID->"d3852b12-ed8c-4c8b-9fa5-\
c8dbfa53d1b3"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetGraph`selection = None}, 
        DynamicBox[GridBox[
          Map[List, {
            ToBoxes[
             
             NeuralNetworks`Private`NetGraph`netLayerPlot[{{1, 2}, {3, 2}, {2,
               4}}, 
              Dynamic[NeuralNetworks`Private`NetGraph`selection], False, {
              "matrix", "1", "vector", "Output"}, {Null, 
               RGBColor[0.78, 0.64, 0.98]}, {1, 2, 1, 1}, {Null, DotLayer}, {
               NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]}, None]], 
            If[
             IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
             ItemBox[
              NeuralNetworks`Private`NetGraph`vpathInfo[
               Part[{
                 NeuralNetworks`NetPath["Inputs", "matrix"], 
                 NeuralNetworks`NetPath["Nodes", "1"], 
                 NeuralNetworks`NetPath["Inputs", "vector"], 
                 NeuralNetworks`NetPath["Outputs", "Output"]}, 
                NeuralNetworks`Private`NetGraph`selection], 
               Association[
               "matrix" -> 
                NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT], 
                "vector" -> 
                NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
               Association[
               "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
               Association[
               "1" -> Association[
                 "Type" -> "Dot", "Arrays" -> Association[], "Parameters" -> 
                  Association[], "Inputs" -> Association["Input" -> {
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]}], 
                  "Outputs" -> 
                  Association[
                   "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]]], 
              Alignment -> Center], Nothing]}], 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{173., {66., 72.}},
         TrackedSymbols:>{NeuralNetworks`Private`NetGraph`selection}],
        Initialization:>{NetGraph}],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7263107438049126`*^9},ExpressionUUID->"32bd91e5-bd5a-48e0-8fee-\
c5d21cc0afba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetGraph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"DotLayer", "[", "]"}], "}"}], ",", 
   RowBox[{"Reverse", "[", "edges", "]"}], ",", 
   RowBox[{"\"\<vector\>\"", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"\"\<matrix\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.726310758980343*^9, 
  3.7263107595148344`*^9}},ExpressionUUID->"ae2f29d6-e9c4-4d1b-99b1-\
b6b63c84d09e"],

Cell[BoxData[
 TemplateBox[{
  "NetGraph","valfail",
   "\"Validation failed for \\!\\(\\*RowBox[{\\\"DotLayer\\\"}]\\): \
\\!\\(\\*RowBox[{\\\"\\\\\\\"invalid dimensions for input tensors: {2} and \
{3, 2}.\\\\\\\"\\\"}]\\)\"",2,485,82,24707281047438988342,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.7263107627443647`*^9},ExpressionUUID->"af933ef4-c276-46c3-a5fe-\
9c2ee1176071"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.7263107627689314`*^9},ExpressionUUID->"bedabe26-6a2d-43d6-86c3-\
ecb3fcbc460c"]
}, Open  ]]
},
WindowSize->{733, 831},
WindowMargins->{{Automatic, -33}, {Automatic, 48}},
FrontEndVersion->"11.2 for Microsoft Windows (64-bit) (September 10, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 398, 10, 28, "Input",ExpressionUUID->"b38db364-ec46-4dd1-9f5c-39e6fa064756"],
Cell[981, 34, 3162, 67, 118, "Output",ExpressionUUID->"ab336f6d-4a2d-4015-a57a-eec5b49cc9d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4180, 106, 271, 7, 28, "Input",ExpressionUUID->"d0cf8cd9-6df6-4390-a8ee-50c19e789dc9"],
Cell[4454, 115, 193, 5, 32, "Output",ExpressionUUID->"a8a1d821-ff4d-4621-85bd-bab2c1a612f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4684, 125, 518, 13, 28, "Input",ExpressionUUID->"299525ea-47a7-4d31-b27b-7aeefa2b0f36"],
Cell[5205, 140, 3726, 82, 118, "Output",ExpressionUUID->"7c5f41b7-259e-4c88-96d1-846672e33a39"]
}, Open  ]],
Cell[8946, 225, 252, 6, 28, "Input",ExpressionUUID->"ffc11985-c51b-46c4-9d6e-3302eda810d6"],
Cell[CellGroupData[{
Cell[9223, 235, 240, 6, 28, "Input",ExpressionUUID->"09ab808f-ebc7-401f-a6c9-84bd72bc7c04"],
Cell[9466, 243, 345, 7, 32, "Output",ExpressionUUID->"c67ea53d-8c08-4b7a-bc5d-e76ef044f598"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9848, 255, 590, 15, 48, "Input",ExpressionUUID->"9824cfe5-5133-4a4a-9400-e26cefd5e599"],
Cell[10441, 272, 4227, 91, 118, "Output",ExpressionUUID->"903ad303-d1a7-4b84-92eb-329ef5736748"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14705, 368, 235, 5, 28, "Input",ExpressionUUID->"d3e33113-e28e-4fdd-8854-a1afd6026f1d"],
Cell[14943, 375, 9272, 208, 72, "Output",ExpressionUUID->"d639b4ef-4508-4465-9afd-311ca4f1aee0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24252, 588, 229, 5, 28, "Input",ExpressionUUID->"1cf431c1-5042-4044-a5dc-e0b39b48995c"],
Cell[24484, 595, 8755, 196, 72, "Output",ExpressionUUID->"c9360b82-9bdf-4cb0-98a6-f9a44fac89ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33276, 796, 635, 16, 28, "Input",ExpressionUUID->"22f054ca-ff71-40aa-88b1-b333741d5345"],
Cell[33914, 814, 7452, 153, 182, "Output",ExpressionUUID->"79a321bc-9347-4068-affe-b25bbe1f030a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41403, 972, 324, 9, 28, "Input",ExpressionUUID->"1b4d6b8c-2d7e-423b-80a8-9184e2a04093"],
Cell[41730, 983, 250, 6, 32, "Output",ExpressionUUID->"1d335125-2c9a-4220-bf6b-e2ae3e73c784"]
}, Open  ]],
Cell[41995, 992, 154, 3, 28, "Input",ExpressionUUID->"a91c6429-9b49-4962-a572-dc47d370418f"],
Cell[CellGroupData[{
Cell[42174, 999, 577, 16, 28, "Input",ExpressionUUID->"1b8152ef-b0c0-4dec-8396-065b6fded70d"],
Cell[42754, 1017, 6826, 142, 118, "Output",ExpressionUUID->"25451d8b-36a9-423c-9a46-16b318633fcb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49617, 1164, 300, 8, 28, "Input",ExpressionUUID->"05f4556c-3d65-4a6d-bfd7-bdeff0be7574"],
Cell[49920, 1174, 14859, 315, 174, "Output",ExpressionUUID->"654665a2-91aa-4ee6-83b5-4c693d104308"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64816, 1494, 662, 17, 48, "Input",ExpressionUUID->"69da28dc-5590-4090-9ffb-c542b9094e46"],
Cell[65481, 1513, 4825, 101, 176, "Output",ExpressionUUID->"7a991b40-d6a6-4644-b9bf-60b832017870"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70343, 1619, 269, 7, 28, "Input",ExpressionUUID->"033ebf52-29ac-41da-a1ce-411178a2c5cb"],
Cell[70615, 1628, 453, 12, 32, "Output",ExpressionUUID->"7e3b66ce-b3fc-406c-9460-3c55fe15ff06"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71105, 1645, 320, 9, 28, "Input",ExpressionUUID->"f238a82c-1925-4cc4-9832-75da03b1110d"],
Cell[71428, 1656, 193, 5, 32, "Output",ExpressionUUID->"d3e24ae1-4d5f-423e-8a28-042152146ff9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71658, 1666, 416, 11, 28, "Input",ExpressionUUID->"2e53354d-800a-4c54-b24f-2b00156b5ffa"],
Cell[72077, 1679, 4349, 92, 118, "Output",ExpressionUUID->"28faf09d-35a9-4f46-8e66-86e2a37844d9"]
}, Open  ]],
Cell[76441, 1774, 272, 7, 28, "Input",ExpressionUUID->"3d81df80-76aa-4c7c-b571-6cf0d251b2fc"],
Cell[CellGroupData[{
Cell[76738, 1785, 580, 16, 28, InheritFromParent,ExpressionUUID->"cd07b38e-7644-403b-8ea8-ddc5d2160989"],
Cell[77321, 1803, 6361, 130, 182, "Output",ExpressionUUID->"8950a49a-bc45-4571-bb60-3443dc7dbaf4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83719, 1938, 741, 21, 48, "Input",ExpressionUUID->"3227385b-b096-444b-b42c-adb409b02854"],
Cell[84463, 1961, 5993, 123, 182, "Output",ExpressionUUID->"c30874f9-2c28-4d48-8482-97d1acc68cbb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90493, 2089, 503, 14, 28, "Input",ExpressionUUID->"d0edf368-733a-45e7-b145-2290308eaad7"],
Cell[90999, 2105, 248, 7, 32, "Output",ExpressionUUID->"81b3b9eb-1bde-443d-9e2b-a2b21db62e86"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91284, 2117, 691, 18, 48, "Input",ExpressionUUID->"a1c4bf8e-bc91-4115-b8ca-553ea798616d"],
Cell[91978, 2137, 4475, 95, 196, "Output",ExpressionUUID->"ddf577aa-f107-40e2-b2c9-5fc2567ff07d"]
}, Open  ]],
Cell[96468, 2235, 252, 6, 28, "Input",ExpressionUUID->"b92a9182-c6a3-40a0-b9ab-2ede00f350e9"],
Cell[CellGroupData[{
Cell[96745, 2245, 437, 11, 28, "Input",ExpressionUUID->"ce5b5b47-8ecc-4717-b2ab-2c27b400ea70"],
Cell[97185, 2258, 201, 4, 32, "Output",ExpressionUUID->"05561eb7-694e-439e-918c-d65b4ed37650"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97423, 2267, 716, 19, 48, "Input",ExpressionUUID->"03ec4089-6035-4b01-b9a0-565425e9f6cd"],
Cell[98142, 2288, 3255, 72, 118, "Output",ExpressionUUID->"77403a57-b34e-40e4-baa0-bfdd8ea73342"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101434, 2365, 240, 6, 28, "Input",ExpressionUUID->"7e3f0171-3d25-4080-9b93-6b96424c4025"],
Cell[101677, 2373, 162, 3, 32, "Output",ExpressionUUID->"12b808ca-1eb0-4ecf-ac82-16df8c6ab8ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101876, 2381, 295, 7, 28, "Input",ExpressionUUID->"08ede598-0d9a-4744-8efc-c6e65b015cab"],
Cell[102174, 2390, 188, 4, 32, "Output",ExpressionUUID->"0af09a3f-6aaa-4545-90c5-7e1e98028d56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102399, 2399, 294, 8, 28, "Input",ExpressionUUID->"854896d8-debf-4449-9592-406389ce9732"],
Cell[102696, 2409, 327, 8, 32, "Output",ExpressionUUID->"3da1ab7d-30c9-482c-8f82-cdf7ab734c07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103060, 2422, 355, 10, 28, "Input",ExpressionUUID->"e65c8111-4440-4b00-81cb-1001ea14249b"],
Cell[103418, 2434, 176, 3, 32, "Output",ExpressionUUID->"da6bff42-cdfc-499f-b1ed-f8d64f878c26"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103631, 2442, 285, 8, 28, "Input",ExpressionUUID->"d0947248-7d5b-4829-b12d-e621ee3e2e23"],
Cell[103919, 2452, 148, 3, 32, "Output",ExpressionUUID->"50600609-40c2-4a84-aa4e-fda858c28861"]
}, Open  ]],
Cell[CellGroupData[{
Cell[104104, 2460, 474, 13, 28, "Input",ExpressionUUID->"62a2690f-c0df-4331-a37b-bce38c4729d6"],
Cell[104581, 2475, 5978, 126, 118, "Output",ExpressionUUID->"af815c58-565d-4c30-ad1f-c03c31ef80c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110596, 2606, 264, 7, 28, "Input",ExpressionUUID->"6007b8ef-f5d7-432b-addd-076690f7ba1f"],
Cell[110863, 2615, 3523, 79, 118, "Output",ExpressionUUID->"545999ff-68d3-40c3-a188-4d870db1cd6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114423, 2699, 246, 5, 28, "Input",ExpressionUUID->"20c7cdfb-2282-46ae-aaa5-407418486f3d"],
Cell[114672, 2706, 17676, 353, 89, "Output",ExpressionUUID->"2b5e7d33-b4ab-4e34-a843-0263261f420c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132385, 3064, 420, 10, 48, "Input",ExpressionUUID->"aa3b3da9-65e2-48e1-9304-9496cb88385f"],
Cell[132808, 3076, 40152, 726, 249, "Output",ExpressionUUID->"25ed9a60-c8e6-46dc-981b-4138cf2a149a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172997, 3807, 346, 8, 28, "Input",ExpressionUUID->"d3e0ac87-c2d6-41f4-9376-844037a1aac3"],
Cell[173346, 3817, 863, 18, 109, "Output",ExpressionUUID->"98be610f-371a-4d87-9b12-3319416da4ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[174246, 3840, 355, 8, 28, "Input",ExpressionUUID->"29c13b58-ff03-4e4f-9655-82dbec093933"],
Cell[174604, 3850, 2625, 39, 204, "Output",ExpressionUUID->"d215a721-420d-435f-9639-bc9e1a475ebe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177266, 3894, 1065, 25, 124, "Input",ExpressionUUID->"14c4c3af-1178-4fbc-a186-6ee3be4535ed"],
Cell[178334, 3921, 22626, 472, 242, "Output",ExpressionUUID->"b5525122-13ca-48c9-91b0-78665aebea94"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200997, 4398, 1277, 32, 67, "Input",ExpressionUUID->"1513dabc-460c-4af3-9b34-50a75da8a7d5"],
Cell[202277, 4432, 17190, 329, 196, "Output",ExpressionUUID->"ff63482a-e1ec-4a78-84cb-f21663b4f1db"]
}, Open  ]],
Cell[219482, 4764, 288, 7, 28, "Input",ExpressionUUID->"84341861-a102-4756-8dc4-534f1563dfec"],
Cell[CellGroupData[{
Cell[219795, 4775, 563, 16, 48, "Input",ExpressionUUID->"1f500af6-1324-42dc-8801-7fd418dbb637"],
Cell[220361, 4793, 6449, 131, 118, "Output",ExpressionUUID->"9944611e-2909-4a80-9dd8-66eb73e129b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226847, 4929, 820, 23, 48, "Input",ExpressionUUID->"dfa164f6-18fb-40da-a70d-0ef8538d99b6"],
Cell[227670, 4954, 10912, 219, 106, "Output",ExpressionUUID->"08c28a95-f902-4c82-b270-b409511e85ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[238619, 5178, 533, 14, 28, "Input",ExpressionUUID->"4c82cf7f-3e74-4365-a8d4-bb0ec8f0f3dd"],
Cell[239155, 5194, 5769, 122, 118, "Output",ExpressionUUID->"ae0239c6-bc42-4a37-a3bc-1a66700734f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244961, 5321, 189, 4, 28, "Input",ExpressionUUID->"163b9ceb-9eb0-4aa2-863a-f3cd832a4f2a"],
Cell[245153, 5327, 31976, 699, 277, "Output",ExpressionUUID->"df39b9ea-bb6f-4f86-b2ba-44f8627a52ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277166, 6031, 754, 19, 48, "Input",ExpressionUUID->"f7601b86-329e-483a-87d8-56ad7a283e60"],
Cell[277923, 6052, 6284, 131, 392, "Output",ExpressionUUID->"7a2afd54-1e93-4ba2-bb53-e56fe39b8f08"]
}, Open  ]],
Cell[CellGroupData[{
Cell[284244, 6188, 196, 4, 28, "Input",ExpressionUUID->"7df6facc-fe9e-43de-996b-138aa1820267"],
Cell[284443, 6194, 15686, 382, 189, "Output",ExpressionUUID->"53c0eceb-6fb6-4605-a3c8-84ce351539f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[300166, 6581, 412, 12, 28, "Input",ExpressionUUID->"6fb75d6f-d266-4307-93d5-1abccdcc85da"],
Cell[300581, 6595, 362, 10, 32, "Output",ExpressionUUID->"92e96d87-1eee-4a67-8eff-f16ce046ce61"]
}, Open  ]],
Cell[CellGroupData[{
Cell[300980, 6610, 469, 12, 28, "Input",ExpressionUUID->"d3852b12-ed8c-4c8b-9fa5-c8dbfa53d1b3"],
Cell[301452, 6624, 2623, 58, 180, "Output",ExpressionUUID->"32bd91e5-bd5a-48e0-8fee-c5d21cc0afba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[304112, 6687, 489, 13, 28, "Input",ExpressionUUID->"ae2f29d6-e9c4-4d1b-99b1-b6b63c84d09e"],
Cell[304604, 6702, 412, 9, 23, "Message",ExpressionUUID->"af933ef4-c276-46c3-a5fe-9c2ee1176071"],
Cell[305019, 6713, 138, 3, 32, "Output",ExpressionUUID->"bedabe26-6a2d-43d6-86c3-ecb3fcbc460c"]
}, Open  ]]
}
]
*)

